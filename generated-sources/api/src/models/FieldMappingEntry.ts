/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MappedValue } from './MappedValue';
import {
    MappedValueFromJSON,
    MappedValueFromJSONTyped,
    MappedValueToJSON,
} from './MappedValue';

/**
 * 
 * @export
 * @interface FieldMappingEntry
 */
export interface FieldMappingEntry {
    /**
     * The name of the field in your application.
     * @type {string}
     * @memberof FieldMappingEntry
     */
    mapToName: string;
    /**
     * Optional display name of the field to show the user in the mapping UI.
     * @type {string}
     * @memberof FieldMappingEntry
     */
    mapToDisplayName?: string;
    /**
     * Optional prompt to show the user in the mapping UI.
     * @type {string}
     * @memberof FieldMappingEntry
     */
    prompt?: string;
    /**
     * If you would like the user to map a set of possible values, this is the list of possible values of the field in your application.
     * @type {Array<MappedValue>}
     * @memberof FieldMappingEntry
     */
    mappedValues?: Array<MappedValue>;
    /**
     * The name of the field in SaaS provider, if present, then we will not prompt the user to map the field.
     * @type {string}
     * @memberof FieldMappingEntry
     */
    fieldName?: string;
}

/**
 * Check if a given object implements the FieldMappingEntry interface.
 */
export function instanceOfFieldMappingEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mapToName" in value;

    return isInstance;
}

export function FieldMappingEntryFromJSON(json: any): FieldMappingEntry {
    return FieldMappingEntryFromJSONTyped(json, false);
}

export function FieldMappingEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldMappingEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mapToName': json['mapToName'],
        'mapToDisplayName': !exists(json, 'mapToDisplayName') ? undefined : json['mapToDisplayName'],
        'prompt': !exists(json, 'prompt') ? undefined : json['prompt'],
        'mappedValues': !exists(json, 'mappedValues') ? undefined : ((json['mappedValues'] as Array<any>).map(MappedValueFromJSON)),
        'fieldName': !exists(json, 'fieldName') ? undefined : json['fieldName'],
    };
}

export function FieldMappingEntryToJSON(value?: FieldMappingEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mapToName': value.mapToName,
        'mapToDisplayName': value.mapToDisplayName,
        'prompt': value.prompt,
        'mappedValues': value.mappedValues === undefined ? undefined : ((value.mappedValues as Array<any>).map(MappedValueToJSON)),
        'fieldName': value.fieldName,
    };
}


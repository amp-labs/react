/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateEventTopicRouteRequest
 */
export interface CreateEventTopicRouteRequest {
    /**
     * The type of notification event.
     * @type {string}
     * @memberof CreateEventTopicRouteRequest
     */
    eventType: CreateEventTopicRouteRequestEventTypeEnum;
    /**
     * The ID of the notification topic to route events to.
     * @type {string}
     * @memberof CreateEventTopicRouteRequest
     */
    topicId: string;
}


/**
 * @export
 */
export const CreateEventTopicRouteRequestEventTypeEnum = {
    ReadBackfillDone: 'read.backfill.done',
    ConnectionCreated: 'connection.created',
    InstallationCreated: 'installation.created',
    InstallationUpdated: 'installation.updated',
    InstallationDeleted: 'installation.deleted',
    ReadSchedulePaused: 'read.schedule.paused'
} as const;
export type CreateEventTopicRouteRequestEventTypeEnum = typeof CreateEventTopicRouteRequestEventTypeEnum[keyof typeof CreateEventTopicRouteRequestEventTypeEnum];


/**
 * Check if a given object implements the CreateEventTopicRouteRequest interface.
 */
export function instanceOfCreateEventTopicRouteRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "eventType" in value;
    isInstance = isInstance && "topicId" in value;

    return isInstance;
}

export function CreateEventTopicRouteRequestFromJSON(json: any): CreateEventTopicRouteRequest {
    return CreateEventTopicRouteRequestFromJSONTyped(json, false);
}

export function CreateEventTopicRouteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateEventTopicRouteRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventType': json['eventType'],
        'topicId': json['topicId'],
    };
}

export function CreateEventTopicRouteRequestToJSON(value?: CreateEventTopicRouteRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventType': value.eventType,
        'topicId': value.topicId,
    };
}


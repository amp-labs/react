/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionType } from './ActionType';
import {
    ActionTypeFromJSON,
    ActionTypeFromJSONTyped,
    ActionTypeToJSON,
} from './ActionType';
import type { IntegrationObject } from './IntegrationObject';
import {
    IntegrationObjectFromJSON,
    IntegrationObjectFromJSONTyped,
    IntegrationObjectToJSON,
} from './IntegrationObject';

/**
 * 
 * @export
 * @interface IntegrationAction
 */
export interface IntegrationAction {
    /**
     * 
     * @type {ActionType}
     * @memberof IntegrationAction
     */
    type: ActionType;
    /**
     * 
     * @type {string}
     * @memberof IntegrationAction
     */
    schedule?: string;
    /**
     * 
     * @type {Array<IntegrationObject>}
     * @memberof IntegrationAction
     */
    standardObjects?: Array<IntegrationObject>;
}

/**
 * Check if a given object implements the IntegrationAction interface.
 */
export function instanceOfIntegrationAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function IntegrationActionFromJSON(json: any): IntegrationAction {
    return IntegrationActionFromJSONTyped(json, false);
}

export function IntegrationActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': ActionTypeFromJSON(json['type']),
        'schedule': !exists(json, 'schedule') ? undefined : json['schedule'],
        'standardObjects': !exists(json, 'standardObjects') ? undefined : ((json['standardObjects'] as Array<any>).map(IntegrationObjectFromJSON)),
    };
}

export function IntegrationActionToJSON(value?: IntegrationAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ActionTypeToJSON(value.type),
        'schedule': value.schedule,
        'standardObjects': value.standardObjects === undefined ? undefined : ((value.standardObjects as Array<any>).map(IntegrationObjectToJSON)),
    };
}


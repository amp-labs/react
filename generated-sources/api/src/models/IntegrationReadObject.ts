/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IntegrationField } from './IntegrationField';
import {
    IntegrationFieldFromJSON,
    IntegrationFieldFromJSONTyped,
    IntegrationFieldToJSON,
} from './IntegrationField';
import type { OptionalFieldsAutoOption } from './OptionalFieldsAutoOption';
import {
    OptionalFieldsAutoOptionFromJSON,
    OptionalFieldsAutoOptionFromJSONTyped,
    OptionalFieldsAutoOptionToJSON,
} from './OptionalFieldsAutoOption';

/**
 * 
 * @export
 * @interface IntegrationReadObject
 */
export interface IntegrationReadObject {
    /**
     * 
     * @type {string}
     * @memberof IntegrationReadObject
     */
    objectName: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationReadObject
     */
    destination: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationReadObject
     */
    schedule: string;
    /**
     * 
     * @type {Array<IntegrationField>}
     * @memberof IntegrationReadObject
     */
    requiredFields?: Array<IntegrationField>;
    /**
     * 
     * @type {Array<IntegrationField>}
     * @memberof IntegrationReadObject
     */
    optionalFields?: Array<IntegrationField>;
    /**
     * 
     * @type {OptionalFieldsAutoOption}
     * @memberof IntegrationReadObject
     */
    optionalFieldsAuto?: OptionalFieldsAutoOption;
}

/**
 * Check if a given object implements the IntegrationReadObject interface.
 */
export function instanceOfIntegrationReadObject(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "objectName" in value;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "schedule" in value;

    return isInstance;
}

export function IntegrationReadObjectFromJSON(json: any): IntegrationReadObject {
    return IntegrationReadObjectFromJSONTyped(json, false);
}

export function IntegrationReadObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationReadObject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'objectName': json['objectName'],
        'destination': json['destination'],
        'schedule': json['schedule'],
        'requiredFields': !exists(json, 'requiredFields') ? undefined : ((json['requiredFields'] as Array<any>).map(IntegrationFieldFromJSON)),
        'optionalFields': !exists(json, 'optionalFields') ? undefined : ((json['optionalFields'] as Array<any>).map(IntegrationFieldFromJSON)),
        'optionalFieldsAuto': !exists(json, 'optionalFieldsAuto') ? undefined : OptionalFieldsAutoOptionFromJSON(json['optionalFieldsAuto']),
    };
}

export function IntegrationReadObjectToJSON(value?: IntegrationReadObject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'objectName': value.objectName,
        'destination': value.destination,
        'schedule': value.schedule,
        'requiredFields': value.requiredFields === undefined ? undefined : ((value.requiredFields as Array<any>).map(IntegrationFieldToJSON)),
        'optionalFields': value.optionalFields === undefined ? undefined : ((value.optionalFields as Array<any>).map(IntegrationFieldToJSON)),
        'optionalFieldsAuto': OptionalFieldsAutoOptionToJSON(value.optionalFieldsAuto),
    };
}


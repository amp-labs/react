/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Backfill } from './Backfill';
import {
    BackfillFromJSON,
    BackfillFromJSONTyped,
    BackfillToJSON,
} from './Backfill';
import type { FieldMetadata } from './FieldMetadata';
import {
    FieldMetadataFromJSON,
    FieldMetadataFromJSONTyped,
    FieldMetadataToJSON,
} from './FieldMetadata';
import type { HydratedIntegrationField } from './HydratedIntegrationField';
import {
    HydratedIntegrationFieldFromJSON,
    HydratedIntegrationFieldFromJSONTyped,
    HydratedIntegrationFieldToJSON,
} from './HydratedIntegrationField';
import type { OptionalFieldsAutoOption } from './OptionalFieldsAutoOption';
import {
    OptionalFieldsAutoOptionFromJSON,
    OptionalFieldsAutoOptionFromJSONTyped,
    OptionalFieldsAutoOptionToJSON,
} from './OptionalFieldsAutoOption';

/**
 * 
 * @export
 * @interface HydratedIntegrationObject
 */
export interface HydratedIntegrationObject {
    /**
     * Error message if there was an issue hydrating this object.
     * @type {string}
     * @memberof HydratedIntegrationObject
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof HydratedIntegrationObject
     */
    objectName: string;
    /**
     * 
     * @type {string}
     * @memberof HydratedIntegrationObject
     */
    displayName: string;
    /**
     * An object name to map to.
     * @type {string}
     * @memberof HydratedIntegrationObject
     */
    mapToName?: string;
    /**
     * A display name to map to.
     * @type {string}
     * @memberof HydratedIntegrationObject
     */
    mapToDisplayName?: string;
    /**
     * 
     * @type {string}
     * @memberof HydratedIntegrationObject
     */
    destination: string;
    /**
     * 
     * @type {string}
     * @memberof HydratedIntegrationObject
     */
    schedule: string;
    /**
     * 
     * @type {Array<HydratedIntegrationField>}
     * @memberof HydratedIntegrationObject
     */
    requiredFields?: Array<HydratedIntegrationField>;
    /**
     * 
     * @type {Array<HydratedIntegrationField>}
     * @memberof HydratedIntegrationObject
     */
    optionalFields?: Array<HydratedIntegrationField>;
    /**
     * 
     * @type {OptionalFieldsAutoOption}
     * @memberof HydratedIntegrationObject
     */
    optionalFieldsAuto?: OptionalFieldsAutoOption;
    /**
     * This is a list of all fields on the object for a particular SaaS instance, including their display names.
     * @type {Array<HydratedIntegrationField>}
     * @memberof HydratedIntegrationObject
     */
    allFields?: Array<HydratedIntegrationField>;
    /**
     * This is a map of all fields on the object including their metadata (such as display name and type), the keys of the map are the field names.
     * @type {{ [key: string]: FieldMetadata; }}
     * @memberof HydratedIntegrationObject
     */
    allFieldsMetadata?: { [key: string]: FieldMetadata; };
    /**
     * 
     * @type {Backfill}
     * @memberof HydratedIntegrationObject
     */
    backfill?: Backfill;
}

/**
 * Check if a given object implements the HydratedIntegrationObject interface.
 */
export function instanceOfHydratedIntegrationObject(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "objectName" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "schedule" in value;

    return isInstance;
}

export function HydratedIntegrationObjectFromJSON(json: any): HydratedIntegrationObject {
    return HydratedIntegrationObjectFromJSONTyped(json, false);
}

export function HydratedIntegrationObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): HydratedIntegrationObject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': !exists(json, 'error') ? undefined : json['error'],
        'objectName': json['objectName'],
        'displayName': json['displayName'],
        'mapToName': !exists(json, 'mapToName') ? undefined : json['mapToName'],
        'mapToDisplayName': !exists(json, 'mapToDisplayName') ? undefined : json['mapToDisplayName'],
        'destination': json['destination'],
        'schedule': json['schedule'],
        'requiredFields': !exists(json, 'requiredFields') ? undefined : ((json['requiredFields'] as Array<any>).map(HydratedIntegrationFieldFromJSON)),
        'optionalFields': !exists(json, 'optionalFields') ? undefined : ((json['optionalFields'] as Array<any>).map(HydratedIntegrationFieldFromJSON)),
        'optionalFieldsAuto': !exists(json, 'optionalFieldsAuto') ? undefined : OptionalFieldsAutoOptionFromJSON(json['optionalFieldsAuto']),
        'allFields': !exists(json, 'allFields') ? undefined : ((json['allFields'] as Array<any>).map(HydratedIntegrationFieldFromJSON)),
        'allFieldsMetadata': !exists(json, 'allFieldsMetadata') ? undefined : (mapValues(json['allFieldsMetadata'], FieldMetadataFromJSON)),
        'backfill': !exists(json, 'backfill') ? undefined : BackfillFromJSON(json['backfill']),
    };
}

export function HydratedIntegrationObjectToJSON(value?: HydratedIntegrationObject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': value.error,
        'objectName': value.objectName,
        'displayName': value.displayName,
        'mapToName': value.mapToName,
        'mapToDisplayName': value.mapToDisplayName,
        'destination': value.destination,
        'schedule': value.schedule,
        'requiredFields': value.requiredFields === undefined ? undefined : ((value.requiredFields as Array<any>).map(HydratedIntegrationFieldToJSON)),
        'optionalFields': value.optionalFields === undefined ? undefined : ((value.optionalFields as Array<any>).map(HydratedIntegrationFieldToJSON)),
        'optionalFieldsAuto': OptionalFieldsAutoOptionToJSON(value.optionalFieldsAuto),
        'allFields': value.allFields === undefined ? undefined : ((value.allFields as Array<any>).map(HydratedIntegrationFieldToJSON)),
        'allFieldsMetadata': value.allFieldsMetadata === undefined ? undefined : (mapValues(value.allFieldsMetadata, FieldMetadataToJSON)),
        'backfill': BackfillToJSON(value.backfill),
    };
}


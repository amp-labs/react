/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PatchJWTKeyRequestJwtKey } from './PatchJWTKeyRequestJwtKey';
import {
    PatchJWTKeyRequestJwtKeyFromJSON,
    PatchJWTKeyRequestJwtKeyFromJSONTyped,
    PatchJWTKeyRequestJwtKeyToJSON,
} from './PatchJWTKeyRequestJwtKey';

/**
 * 
 * @export
 * @interface PatchJWTKeyRequest
 */
export interface PatchJWTKeyRequest {
    /**
     * List of field paths to update (currently supports 'active' and 'name')
     * @type {Array<string>}
     * @memberof PatchJWTKeyRequest
     */
    updateMask: Array<PatchJWTKeyRequestUpdateMaskEnum>;
    /**
     * 
     * @type {PatchJWTKeyRequestJwtKey}
     * @memberof PatchJWTKeyRequest
     */
    jwtKey: PatchJWTKeyRequestJwtKey;
}


/**
 * @export
 */
export const PatchJWTKeyRequestUpdateMaskEnum = {
    Active: 'active',
    Label: 'label'
} as const;
export type PatchJWTKeyRequestUpdateMaskEnum = typeof PatchJWTKeyRequestUpdateMaskEnum[keyof typeof PatchJWTKeyRequestUpdateMaskEnum];


/**
 * Check if a given object implements the PatchJWTKeyRequest interface.
 */
export function instanceOfPatchJWTKeyRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "updateMask" in value;
    isInstance = isInstance && "jwtKey" in value;

    return isInstance;
}

export function PatchJWTKeyRequestFromJSON(json: any): PatchJWTKeyRequest {
    return PatchJWTKeyRequestFromJSONTyped(json, false);
}

export function PatchJWTKeyRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchJWTKeyRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'updateMask': json['updateMask'],
        'jwtKey': PatchJWTKeyRequestJwtKeyFromJSON(json['jwtKey']),
    };
}

export function PatchJWTKeyRequestToJSON(value?: PatchJWTKeyRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'updateMask': value.updateMask,
        'jwtKey': PatchJWTKeyRequestJwtKeyToJSON(value.jwtKey),
    };
}


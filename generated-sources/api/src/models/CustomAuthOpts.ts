/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomAuthHeader } from './CustomAuthHeader';
import {
    CustomAuthHeaderFromJSON,
    CustomAuthHeaderFromJSONTyped,
    CustomAuthHeaderToJSON,
} from './CustomAuthHeader';
import type { CustomAuthInput } from './CustomAuthInput';
import {
    CustomAuthInputFromJSON,
    CustomAuthInputFromJSONTyped,
    CustomAuthInputToJSON,
} from './CustomAuthInput';
import type { CustomAuthQueryParam } from './CustomAuthQueryParam';
import {
    CustomAuthQueryParamFromJSON,
    CustomAuthQueryParamFromJSONTyped,
    CustomAuthQueryParamToJSON,
} from './CustomAuthQueryParam';

/**
 * Configuration for custom auth. Optional.
 * @export
 * @interface CustomAuthOpts
 */
export interface CustomAuthOpts {
    /**
     * A list of custom headers to be used for authentication. The backend will add these headers.
     * @type {Array<CustomAuthHeader>}
     * @memberof CustomAuthOpts
     */
    headers?: Array<CustomAuthHeader>;
    /**
     * A list of custom query parameters to be used for authentication. The backend will add these query parameters.
     * @type {Array<CustomAuthQueryParam>}
     * @memberof CustomAuthOpts
     */
    queryParams?: Array<CustomAuthQueryParam>;
    /**
     * A list of custom input fields for authentication. The frontend will render these input fields and the backend will receive the values of these fields before making a request.
     * @type {Array<CustomAuthInput>}
     * @memberof CustomAuthOpts
     */
    inputs?: Array<CustomAuthInput>;
}

/**
 * Check if a given object implements the CustomAuthOpts interface.
 */
export function instanceOfCustomAuthOpts(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomAuthOptsFromJSON(json: any): CustomAuthOpts {
    return CustomAuthOptsFromJSONTyped(json, false);
}

export function CustomAuthOptsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomAuthOpts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'headers': !exists(json, 'headers') ? undefined : ((json['headers'] as Array<any>).map(CustomAuthHeaderFromJSON)),
        'queryParams': !exists(json, 'queryParams') ? undefined : ((json['queryParams'] as Array<any>).map(CustomAuthQueryParamFromJSON)),
        'inputs': !exists(json, 'inputs') ? undefined : ((json['inputs'] as Array<any>).map(CustomAuthInputFromJSON)),
    };
}

export function CustomAuthOptsToJSON(value?: CustomAuthOpts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'headers': value.headers === undefined ? undefined : ((value.headers as Array<any>).map(CustomAuthHeaderToJSON)),
        'queryParams': value.queryParams === undefined ? undefined : ((value.queryParams as Array<any>).map(CustomAuthQueryParamToJSON)),
        'inputs': value.inputs === undefined ? undefined : ((value.inputs as Array<any>).map(CustomAuthInputToJSON)),
    };
}


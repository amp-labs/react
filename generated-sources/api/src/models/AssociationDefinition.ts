/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssociationLabels } from './AssociationLabels';
import {
    AssociationLabelsFromJSON,
    AssociationLabelsFromJSONTyped,
    AssociationLabelsToJSON,
} from './AssociationLabels';

/**
 * Relationship information for a field to another object
 * @export
 * @interface AssociationDefinition
 */
export interface AssociationDefinition {
    /**
     * High-level association variety (e.g., 'foreignKey', 'lookup', 'ref')
     * @type {string}
     * @memberof AssociationDefinition
     */
    associationType: string;
    /**
     * Name of the referenced/parent object
     * @type {string}
     * @memberof AssociationDefinition
     */
    targetObject: string;
    /**
     * Name of the referenced field on the target object
     * @type {string}
     * @memberof AssociationDefinition
     */
    targetField?: string;
    /**
     * Association cardinality from the referencing field's perspective
     * @type {string}
     * @memberof AssociationDefinition
     */
    cardinality?: string;
    /**
     * Behavior upon foreign object deletion
     * @type {string}
     * @memberof AssociationDefinition
     */
    onDelete?: string;
    /**
     * If true, a referenced record must exist
     * @type {boolean}
     * @memberof AssociationDefinition
     */
    required?: boolean;
    /**
     * Optional inverse relationship/property name exposed on the target object
     * @type {string}
     * @memberof AssociationDefinition
     */
    reverseLookupFieldName?: string;
    /**
     * 
     * @type {AssociationLabels}
     * @memberof AssociationDefinition
     */
    labels?: AssociationLabels;
}

/**
 * Check if a given object implements the AssociationDefinition interface.
 */
export function instanceOfAssociationDefinition(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "associationType" in value;
    isInstance = isInstance && "targetObject" in value;

    return isInstance;
}

export function AssociationDefinitionFromJSON(json: any): AssociationDefinition {
    return AssociationDefinitionFromJSONTyped(json, false);
}

export function AssociationDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssociationDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'associationType': json['associationType'],
        'targetObject': json['targetObject'],
        'targetField': !exists(json, 'targetField') ? undefined : json['targetField'],
        'cardinality': !exists(json, 'cardinality') ? undefined : json['cardinality'],
        'onDelete': !exists(json, 'onDelete') ? undefined : json['onDelete'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'reverseLookupFieldName': !exists(json, 'reverseLookupFieldName') ? undefined : json['reverseLookupFieldName'],
        'labels': !exists(json, 'labels') ? undefined : AssociationLabelsFromJSON(json['labels']),
    };
}

export function AssociationDefinitionToJSON(value?: AssociationDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'associationType': value.associationType,
        'targetObject': value.targetObject,
        'targetField': value.targetField,
        'cardinality': value.cardinality,
        'onDelete': value.onDelete,
        'required': value.required,
        'reverseLookupFieldName': value.reverseLookupFieldName,
        'labels': AssociationLabelsToJSON(value.labels),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Operation
 */
export interface Operation {
    /**
     * The Ampersand project ID.
     * @type {string}
     * @memberof Operation
     */
    projectId: string;
    /**
     * The integration ID.
     * @type {string}
     * @memberof Operation
     */
    integrationId: string;
    /**
     * The config ID.
     * @type {string}
     * @memberof Operation
     */
    configId: string;
    /**
     * The action type to perform for the given object.
     * @type {string}
     * @memberof Operation
     */
    actionType: string;
    /**
     * The operation ID.
     * @type {string}
     * @memberof Operation
     */
    id: string;
    /**
     * The Ampersand installation ID.
     * @type {string}
     * @memberof Operation
     */
    installationId: string;
    /**
     * The status of the operation.
     * @type {string}
     * @memberof Operation
     */
    status: string;
    /**
     * The result of the operation.
     * @type {string}
     * @memberof Operation
     */
    result?: string;
    /**
     * Metadata associated with the operation.
     * @type {object}
     * @memberof Operation
     */
    metadata?: object;
    /**
     * The time the operation was created.
     * @type {Date}
     * @memberof Operation
     */
    createTime?: Date;
}

/**
 * Check if a given object implements the Operation interface.
 */
export function instanceOfOperation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "integrationId" in value;
    isInstance = isInstance && "configId" in value;
    isInstance = isInstance && "actionType" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "installationId" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function OperationFromJSON(json: any): Operation {
    return OperationFromJSONTyped(json, false);
}

export function OperationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Operation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'projectId': json['projectId'],
        'integrationId': json['integrationId'],
        'configId': json['configId'],
        'actionType': json['actionType'],
        'id': json['id'],
        'installationId': json['installationId'],
        'status': json['status'],
        'result': !exists(json, 'result') ? undefined : json['result'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'createTime': !exists(json, 'createTime') ? undefined : (new Date(json['createTime'])),
    };
}

export function OperationToJSON(value?: Operation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'projectId': value.projectId,
        'integrationId': value.integrationId,
        'configId': value.configId,
        'actionType': value.actionType,
        'id': value.id,
        'installationId': value.installationId,
        'status': value.status,
        'result': value.result,
        'metadata': value.metadata,
        'createTime': value.createTime === undefined ? undefined : (value.createTime.toISOString()),
    };
}


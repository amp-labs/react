/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Invite
 */
export interface Invite {
    /**
     * The invite ID.
     * @type {string}
     * @memberof Invite
     */
    id: string;
    /**
     * The email address of the person invited.
     * @type {string}
     * @memberof Invite
     */
    invitedEmail: string;
    /**
     * The type of entity that the person is invited to.
     * @type {string}
     * @memberof Invite
     */
    parentType: InviteParentTypeEnum;
    /**
     * The ID of the parent (e.g. org ID).
     * @type {string}
     * @memberof Invite
     */
    parentId: string;
    /**
     * The status of the invite.
     * @type {string}
     * @memberof Invite
     */
    status: InviteStatusEnum;
    /**
     * The time the invite was created.
     * @type {Date}
     * @memberof Invite
     */
    createTime: Date;
    /**
     * The time the invite was updated.
     * @type {Date}
     * @memberof Invite
     */
    updateTime?: Date;
}


/**
 * @export
 */
export const InviteParentTypeEnum = {
    Org: 'org'
} as const;
export type InviteParentTypeEnum = typeof InviteParentTypeEnum[keyof typeof InviteParentTypeEnum];

/**
 * @export
 */
export const InviteStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Revoked: 'revoked',
    Expired: 'expired'
} as const;
export type InviteStatusEnum = typeof InviteStatusEnum[keyof typeof InviteStatusEnum];


/**
 * Check if a given object implements the Invite interface.
 */
export function instanceOfInvite(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "invitedEmail" in value;
    isInstance = isInstance && "parentType" in value;
    isInstance = isInstance && "parentId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "createTime" in value;

    return isInstance;
}

export function InviteFromJSON(json: any): Invite {
    return InviteFromJSONTyped(json, false);
}

export function InviteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invite {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'invitedEmail': json['invitedEmail'],
        'parentType': json['parentType'],
        'parentId': json['parentId'],
        'status': json['status'],
        'createTime': (new Date(json['createTime'])),
        'updateTime': !exists(json, 'updateTime') ? undefined : (new Date(json['updateTime'])),
    };
}

export function InviteToJSON(value?: Invite | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'invitedEmail': value.invitedEmail,
        'parentType': value.parentType,
        'parentId': value.parentId,
        'status': value.status,
        'createTime': (value.createTime.toISOString()),
        'updateTime': value.updateTime === undefined ? undefined : (value.updateTime.toISOString()),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HydratedIntegrationRead } from './HydratedIntegrationRead';
import {
    HydratedIntegrationReadFromJSON,
    HydratedIntegrationReadFromJSONTyped,
    HydratedIntegrationReadToJSON,
} from './HydratedIntegrationRead';

/**
 * 
 * @export
 * @interface HydratedIntegration
 */
export interface HydratedIntegration {
    /**
     * 
     * @type {string}
     * @memberof HydratedIntegration
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof HydratedIntegration
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof HydratedIntegration
     */
    provider: string;
    /**
     * 
     * @type {HydratedIntegrationRead}
     * @memberof HydratedIntegration
     */
    read?: HydratedIntegrationRead;
}

/**
 * Check if a given object implements the HydratedIntegration interface.
 */
export function instanceOfHydratedIntegration(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "provider" in value;

    return isInstance;
}

export function HydratedIntegrationFromJSON(json: any): HydratedIntegration {
    return HydratedIntegrationFromJSONTyped(json, false);
}

export function HydratedIntegrationFromJSONTyped(json: any, ignoreDiscriminator: boolean): HydratedIntegration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'provider': json['provider'],
        'read': !exists(json, 'read') ? undefined : HydratedIntegrationReadFromJSON(json['read']),
    };
}

export function HydratedIntegrationToJSON(value?: HydratedIntegration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'displayName': value.displayName,
        'provider': value.provider,
        'read': HydratedIntegrationReadToJSON(value.read),
    };
}


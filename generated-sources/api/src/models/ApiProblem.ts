/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiProblem
 */
export interface ApiProblem {
    /**
     * The subsystem that generated the problem
     * @type {string}
     * @memberof ApiProblem
     */
    subsystem?: string;
    /**
     * The time the problem occurred, formatted as RFC-3339
     * @type {Date}
     * @memberof ApiProblem
     */
    time?: Date;
    /**
     * A unique identifier for the request, useful for debugging
     * @type {string}
     * @memberof ApiProblem
     */
    requestId?: string;
    /**
     * A list of problems that caused this problem. This can be used to represent multiple
     * root causes. There is no guaranteed ordering of the causes.
     * @type {Array<string>}
     * @memberof ApiProblem
     */
    causes?: Array<string>;
    /**
     * A brief description of how to resolve the problem
     * @type {string}
     * @memberof ApiProblem
     */
    remedy?: string;
    /**
     * An email address to contact for support
     * @type {string}
     * @memberof ApiProblem
     */
    supportEmail?: string;
    /**
     * A phone number to contact for support
     * @type {string}
     * @memberof ApiProblem
     */
    supportPhone?: string;
    /**
     * A URL to contact for support
     * @type {string}
     * @memberof ApiProblem
     */
    supportUrl?: string;
    /**
     * Whether the request can be retried
     * @type {boolean}
     * @memberof ApiProblem
     */
    retryable?: boolean;
    /**
     * A timestamp after which the request can be retried, formatted as RFC-3339
     * @type {Date}
     * @memberof ApiProblem
     */
    retryAfter?: Date;
    /**
     * Additional context for the problem
     * @type {{ [key: string]: any; }}
     * @memberof ApiProblem
     */
    context?: { [key: string]: any; };
    /**
     * An absolute URI that identifies the problem type
     * @type {string}
     * @memberof ApiProblem
     */
    type?: string;
    /**
     * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
     * @type {string}
     * @memberof ApiProblem
     */
    href?: string;
    /**
     * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
     * @type {string}
     * @memberof ApiProblem
     */
    title?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof ApiProblem
     */
    status?: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem
     * @type {string}
     * @memberof ApiProblem
     */
    detail?: string;
    /**
     * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof ApiProblem
     */
    instance?: string;
}

/**
 * Check if a given object implements the ApiProblem interface.
 */
export function instanceOfApiProblem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApiProblemFromJSON(json: any): ApiProblem {
    return ApiProblemFromJSONTyped(json, false);
}

export function ApiProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiProblem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subsystem': !exists(json, 'subsystem') ? undefined : json['subsystem'],
        'time': !exists(json, 'time') ? undefined : (new Date(json['time'])),
        'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
        'causes': !exists(json, 'causes') ? undefined : json['causes'],
        'remedy': !exists(json, 'remedy') ? undefined : json['remedy'],
        'supportEmail': !exists(json, 'supportEmail') ? undefined : json['supportEmail'],
        'supportPhone': !exists(json, 'supportPhone') ? undefined : json['supportPhone'],
        'supportUrl': !exists(json, 'supportUrl') ? undefined : json['supportUrl'],
        'retryable': !exists(json, 'retryable') ? undefined : json['retryable'],
        'retryAfter': !exists(json, 'retryAfter') ? undefined : (new Date(json['retryAfter'])),
        'context': !exists(json, 'context') ? undefined : json['context'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'detail': !exists(json, 'detail') ? undefined : json['detail'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
    };
}

export function ApiProblemToJSON(value?: ApiProblem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subsystem': value.subsystem,
        'time': value.time === undefined ? undefined : (value.time.toISOString()),
        'requestId': value.requestId,
        'causes': value.causes,
        'remedy': value.remedy,
        'supportEmail': value.supportEmail,
        'supportPhone': value.supportPhone,
        'supportUrl': value.supportUrl,
        'retryable': value.retryable,
        'retryAfter': value.retryAfter === undefined ? undefined : (value.retryAfter.toISOString()),
        'context': value.context,
        'type': value.type,
        'href': value.href,
        'title': value.title,
        'status': value.status,
        'detail': value.detail,
        'instance': value.instance,
    };
}


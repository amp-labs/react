/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionRequestBasicAuth } from './ConnectionRequestBasicAuth';
import {
    ConnectionRequestBasicAuthFromJSON,
    ConnectionRequestBasicAuthFromJSONTyped,
    ConnectionRequestBasicAuthToJSON,
} from './ConnectionRequestBasicAuth';
import type { ConnectionRequestOauth2ClientCredentials } from './ConnectionRequestOauth2ClientCredentials';
import {
    ConnectionRequestOauth2ClientCredentialsFromJSON,
    ConnectionRequestOauth2ClientCredentialsFromJSONTyped,
    ConnectionRequestOauth2ClientCredentialsToJSON,
} from './ConnectionRequestOauth2ClientCredentials';
import type { ConnectionRequestOauth2PasswordCredentials } from './ConnectionRequestOauth2PasswordCredentials';
import {
    ConnectionRequestOauth2PasswordCredentialsFromJSON,
    ConnectionRequestOauth2PasswordCredentialsFromJSONTyped,
    ConnectionRequestOauth2PasswordCredentialsToJSON,
} from './ConnectionRequestOauth2PasswordCredentials';
import type { Oauth2AuthorizationCode } from './Oauth2AuthorizationCode';
import {
    Oauth2AuthorizationCodeFromJSON,
    Oauth2AuthorizationCodeFromJSONTyped,
    Oauth2AuthorizationCodeToJSON,
} from './Oauth2AuthorizationCode';
import type { ProviderMetadataInfo } from './ProviderMetadataInfo';
import {
    ProviderMetadataInfoFromJSON,
    ProviderMetadataInfoFromJSONTyped,
    ProviderMetadataInfoToJSON,
} from './ProviderMetadataInfo';

/**
 * 
 * @export
 * @interface ConnectionRequest
 */
export interface ConnectionRequest {
    /**
     * The ID of the provider workspace that this connection belongs to.
     * @type {string}
     * @memberof ConnectionRequest
     */
    providerWorkspaceRef?: string;
    /**
     * 
     * @type {{ [key: string]: ProviderMetadataInfo; }}
     * @memberof ConnectionRequest
     */
    providerMetadata?: { [key: string]: ProviderMetadataInfo; };
    /**
     * The name of the user group that has access to this installation.
     * @type {string}
     * @memberof ConnectionRequest
     */
    groupName?: string;
    /**
     * The ID of the user group that has access to this installation.
     * @type {string}
     * @memberof ConnectionRequest
     */
    groupRef?: string;
    /**
     * The name of the consumer that has access to this installation.
     * @type {string}
     * @memberof ConnectionRequest
     */
    consumerName?: string;
    /**
     * The consumer reference.
     * @type {string}
     * @memberof ConnectionRequest
     */
    consumerRef?: string;
    /**
     * The provider name (e.g. "salesforce", "hubspot")
     * @type {string}
     * @memberof ConnectionRequest
     */
    provider?: string;
    /**
     * The API key to use for the connection.
     * @type {string}
     * @memberof ConnectionRequest
     */
    apiKey?: string;
    /**
     * Values used for custom auth input variables.
     * @type {{ [key: string]: string; }}
     * @memberof ConnectionRequest
     */
    customAuth?: { [key: string]: string; };
    /**
     * 
     * @type {ConnectionRequestBasicAuth}
     * @memberof ConnectionRequest
     */
    basicAuth?: ConnectionRequestBasicAuth;
    /**
     * 
     * @type {ConnectionRequestOauth2ClientCredentials}
     * @memberof ConnectionRequest
     */
    oauth2ClientCredentials?: ConnectionRequestOauth2ClientCredentials;
    /**
     * 
     * @type {ConnectionRequestOauth2PasswordCredentials}
     * @memberof ConnectionRequest
     */
    oauth2PasswordCredentials?: ConnectionRequestOauth2PasswordCredentials;
    /**
     * 
     * @type {Oauth2AuthorizationCode}
     * @memberof ConnectionRequest
     */
    oauth2AuthorizationCode?: Oauth2AuthorizationCode;
}

/**
 * Check if a given object implements the ConnectionRequest interface.
 */
export function instanceOfConnectionRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConnectionRequestFromJSON(json: any): ConnectionRequest {
    return ConnectionRequestFromJSONTyped(json, false);
}

export function ConnectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'providerWorkspaceRef': !exists(json, 'providerWorkspaceRef') ? undefined : json['providerWorkspaceRef'],
        'providerMetadata': !exists(json, 'providerMetadata') ? undefined : (mapValues(json['providerMetadata'], ProviderMetadataInfoFromJSON)),
        'groupName': !exists(json, 'groupName') ? undefined : json['groupName'],
        'groupRef': !exists(json, 'groupRef') ? undefined : json['groupRef'],
        'consumerName': !exists(json, 'consumerName') ? undefined : json['consumerName'],
        'consumerRef': !exists(json, 'consumerRef') ? undefined : json['consumerRef'],
        'provider': !exists(json, 'provider') ? undefined : json['provider'],
        'apiKey': !exists(json, 'apiKey') ? undefined : json['apiKey'],
        'customAuth': !exists(json, 'customAuth') ? undefined : json['customAuth'],
        'basicAuth': !exists(json, 'basicAuth') ? undefined : ConnectionRequestBasicAuthFromJSON(json['basicAuth']),
        'oauth2ClientCredentials': !exists(json, 'oauth2ClientCredentials') ? undefined : ConnectionRequestOauth2ClientCredentialsFromJSON(json['oauth2ClientCredentials']),
        'oauth2PasswordCredentials': !exists(json, 'oauth2PasswordCredentials') ? undefined : ConnectionRequestOauth2PasswordCredentialsFromJSON(json['oauth2PasswordCredentials']),
        'oauth2AuthorizationCode': !exists(json, 'oauth2AuthorizationCode') ? undefined : Oauth2AuthorizationCodeFromJSON(json['oauth2AuthorizationCode']),
    };
}

export function ConnectionRequestToJSON(value?: ConnectionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'providerWorkspaceRef': value.providerWorkspaceRef,
        'providerMetadata': value.providerMetadata === undefined ? undefined : (mapValues(value.providerMetadata, ProviderMetadataInfoToJSON)),
        'groupName': value.groupName,
        'groupRef': value.groupRef,
        'consumerName': value.consumerName,
        'consumerRef': value.consumerRef,
        'provider': value.provider,
        'apiKey': value.apiKey,
        'customAuth': value.customAuth,
        'basicAuth': ConnectionRequestBasicAuthToJSON(value.basicAuth),
        'oauth2ClientCredentials': ConnectionRequestOauth2ClientCredentialsToJSON(value.oauth2ClientCredentials),
        'oauth2PasswordCredentials': ConnectionRequestOauth2PasswordCredentialsToJSON(value.oauth2PasswordCredentials),
        'oauth2AuthorizationCode': Oauth2AuthorizationCodeToJSON(value.oauth2AuthorizationCode),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';

/**
 * 
 * @export
 * @interface ProjectMembership
 */
export interface ProjectMembership {
    /**
     * 
     * @type {Project}
     * @memberof ProjectMembership
     */
    project: Project;
    /**
     * The builder ID.
     * @type {string}
     * @memberof ProjectMembership
     */
    builderId: string;
    /**
     * The builder's role in the project.
     * @type {string}
     * @memberof ProjectMembership
     */
    role: string;
    /**
     * The time the membership was created.
     * @type {Date}
     * @memberof ProjectMembership
     */
    createTime: Date;
    /**
     * The time the membership was updated.
     * @type {Date}
     * @memberof ProjectMembership
     */
    updateTime?: Date;
}

/**
 * Check if a given object implements the ProjectMembership interface.
 */
export function instanceOfProjectMembership(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "project" in value;
    isInstance = isInstance && "builderId" in value;
    isInstance = isInstance && "role" in value;
    isInstance = isInstance && "createTime" in value;

    return isInstance;
}

export function ProjectMembershipFromJSON(json: any): ProjectMembership {
    return ProjectMembershipFromJSONTyped(json, false);
}

export function ProjectMembershipFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectMembership {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'project': ProjectFromJSON(json['project']),
        'builderId': json['builderId'],
        'role': json['role'],
        'createTime': (new Date(json['createTime'])),
        'updateTime': !exists(json, 'updateTime') ? undefined : (new Date(json['updateTime'])),
    };
}

export function ProjectMembershipToJSON(value?: ProjectMembership | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'project': ProjectToJSON(value.project),
        'builderId': value.builderId,
        'role': value.role,
        'createTime': (value.createTime.toISOString()),
        'updateTime': value.updateTime === undefined ? undefined : (value.updateTime.toISOString()),
    };
}


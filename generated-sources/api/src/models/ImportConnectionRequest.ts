/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImportConnectionRequest
 */
export interface ImportConnectionRequest {
    /**
     * ID of the provider app (e.g. Salesforce connected app), returned from a CreateProviderApp call. If omitted, the default provider app that was set up on the Ampersand Console is assumed.
     * @type {string}
     * @memberof ImportConnectionRequest
     */
    providerAppId?: string;
    /**
     * The ID of the user group that has access to this installation. This is any ID that your app uses to identify a group of users - such as an org, team, or workspace.
     * @type {string}
     * @memberof ImportConnectionRequest
     */
    groupRef: string;
    /**
     * The display name of the user group that has access to this installation.
     * @type {string}
     * @memberof ImportConnectionRequest
     */
    groupName: string;
    /**
     * The ID of the user whose credential was used for this connection. This is the ID that your app uses to identify a user - such as a user ID or username.
     * @type {string}
     * @memberof ImportConnectionRequest
     */
    consumerRef: string;
    /**
     * The display name of the user whose credential was used for this connection.
     * @type {string}
     * @memberof ImportConnectionRequest
     */
    consumerName: string;
    /**
     * The identifier for the provider workspace (e.g. the Salesforce subdomain)
     * @type {string}
     * @memberof ImportConnectionRequest
     */
    providerWorkspaceRef: string;
    /**
     * The ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
     * @type {string}
     * @memberof ImportConnectionRequest
     */
    providerConsumerRef?: string;
    /**
     * The refresh token.
     * @type {string}
     * @memberof ImportConnectionRequest
     */
    refreshToken: string;
    /**
     * The OAuth scopes for this token. If it is unknown, then leave this field empty.
     * @type {Array<string>}
     * @memberof ImportConnectionRequest
     */
    scopes?: Array<string>;
}

/**
 * Check if a given object implements the ImportConnectionRequest interface.
 */
export function instanceOfImportConnectionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "groupRef" in value;
    isInstance = isInstance && "groupName" in value;
    isInstance = isInstance && "consumerRef" in value;
    isInstance = isInstance && "consumerName" in value;
    isInstance = isInstance && "providerWorkspaceRef" in value;
    isInstance = isInstance && "refreshToken" in value;

    return isInstance;
}

export function ImportConnectionRequestFromJSON(json: any): ImportConnectionRequest {
    return ImportConnectionRequestFromJSONTyped(json, false);
}

export function ImportConnectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportConnectionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'providerAppId': !exists(json, 'providerAppId') ? undefined : json['providerAppId'],
        'groupRef': json['groupRef'],
        'groupName': json['groupName'],
        'consumerRef': json['consumerRef'],
        'consumerName': json['consumerName'],
        'providerWorkspaceRef': json['providerWorkspaceRef'],
        'providerConsumerRef': !exists(json, 'providerConsumerRef') ? undefined : json['providerConsumerRef'],
        'refreshToken': json['refreshToken'],
        'scopes': !exists(json, 'scopes') ? undefined : json['scopes'],
    };
}

export function ImportConnectionRequestToJSON(value?: ImportConnectionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'providerAppId': value.providerAppId,
        'groupRef': value.groupRef,
        'groupName': value.groupName,
        'consumerRef': value.consumerRef,
        'consumerName': value.consumerName,
        'providerWorkspaceRef': value.providerWorkspaceRef,
        'providerConsumerRef': value.providerConsumerRef,
        'refreshToken': value.refreshToken,
        'scopes': value.scopes,
    };
}


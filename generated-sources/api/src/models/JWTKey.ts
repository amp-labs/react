/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface JWTKey
 */
export interface JWTKey {
    /**
     * Unique identifier for the JWT key
     * @type {string}
     * @memberof JWTKey
     */
    id: string;
    /**
     * The project this JWT key belongs to
     * @type {string}
     * @memberof JWTKey
     */
    projectId: string;
    /**
     * Human-readable name for the JWT key
     * @type {string}
     * @memberof JWTKey
     */
    label: string;
    /**
     * The cryptographic algorithm used
     * @type {string}
     * @memberof JWTKey
     */
    algorithm: JWTKeyAlgorithmEnum;
    /**
     * RSA public key in PEM format
     * @type {string}
     * @memberof JWTKey
     */
    publicKeyPem: string;
    /**
     * Whether the JWT key is currently active and can be used for verification
     * @type {boolean}
     * @memberof JWTKey
     */
    active: boolean;
    /**
     * Timestamp when the JWT key was created
     * @type {Date}
     * @memberof JWTKey
     */
    createTime: Date;
    /**
     * Timestamp when the JWT key was last updated
     * @type {Date}
     * @memberof JWTKey
     */
    updateTime: Date;
}


/**
 * @export
 */
export const JWTKeyAlgorithmEnum = {
    Rsa: 'RSA'
} as const;
export type JWTKeyAlgorithmEnum = typeof JWTKeyAlgorithmEnum[keyof typeof JWTKeyAlgorithmEnum];


/**
 * Check if a given object implements the JWTKey interface.
 */
export function instanceOfJWTKey(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "algorithm" in value;
    isInstance = isInstance && "publicKeyPem" in value;
    isInstance = isInstance && "active" in value;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "updateTime" in value;

    return isInstance;
}

export function JWTKeyFromJSON(json: any): JWTKey {
    return JWTKeyFromJSONTyped(json, false);
}

export function JWTKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): JWTKey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'projectId': json['projectId'],
        'label': json['label'],
        'algorithm': json['algorithm'],
        'publicKeyPem': json['publicKeyPem'],
        'active': json['active'],
        'createTime': (new Date(json['createTime'])),
        'updateTime': (new Date(json['updateTime'])),
    };
}

export function JWTKeyToJSON(value?: JWTKey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'projectId': value.projectId,
        'label': value.label,
        'algorithm': value.algorithm,
        'publicKeyPem': value.publicKeyPem,
        'active': value.active,
        'createTime': (value.createTime.toISOString()),
        'updateTime': (value.updateTime.toISOString()),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TokenMetadataFields } from './TokenMetadataFields';
import {
    TokenMetadataFieldsFromJSON,
    TokenMetadataFieldsFromJSONTyped,
    TokenMetadataFieldsToJSON,
} from './TokenMetadataFields';

/**
 * 
 * @export
 * @interface Oauth2Opts
 */
export interface Oauth2Opts {
    /**
     * 
     * @type {string}
     * @memberof Oauth2Opts
     */
    grantType: Oauth2OptsGrantTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Oauth2Opts
     */
    authURL?: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2Opts
     */
    tokenURL: string;
    /**
     * 
     * @type {boolean}
     * @memberof Oauth2Opts
     */
    explicitScopesRequired: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Oauth2Opts
     */
    explicitWorkspaceRequired: boolean;
    /**
     * 
     * @type {string}
     * @memberof Oauth2Opts
     */
    audience?: string;
    /**
     * 
     * @type {TokenMetadataFields}
     * @memberof Oauth2Opts
     */
    tokenMetadataFields: TokenMetadataFields;
}


/**
 * @export
 */
export const Oauth2OptsGrantTypeEnum = {
    AuthorizationCode: 'authorizationCode',
    ClientCredentials: 'clientCredentials',
    Pkce: 'PKCE'
} as const;
export type Oauth2OptsGrantTypeEnum = typeof Oauth2OptsGrantTypeEnum[keyof typeof Oauth2OptsGrantTypeEnum];


/**
 * Check if a given object implements the Oauth2Opts interface.
 */
export function instanceOfOauth2Opts(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "grantType" in value;
    isInstance = isInstance && "tokenURL" in value;
    isInstance = isInstance && "explicitScopesRequired" in value;
    isInstance = isInstance && "explicitWorkspaceRequired" in value;
    isInstance = isInstance && "tokenMetadataFields" in value;

    return isInstance;
}

export function Oauth2OptsFromJSON(json: any): Oauth2Opts {
    return Oauth2OptsFromJSONTyped(json, false);
}

export function Oauth2OptsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Oauth2Opts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'grantType': json['grantType'],
        'authURL': !exists(json, 'authURL') ? undefined : json['authURL'],
        'tokenURL': json['tokenURL'],
        'explicitScopesRequired': json['explicitScopesRequired'],
        'explicitWorkspaceRequired': json['explicitWorkspaceRequired'],
        'audience': !exists(json, 'audience') ? undefined : json['audience'],
        'tokenMetadataFields': TokenMetadataFieldsFromJSON(json['tokenMetadataFields']),
    };
}

export function Oauth2OptsToJSON(value?: Oauth2Opts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'grantType': value.grantType,
        'authURL': value.authURL,
        'tokenURL': value.tokenURL,
        'explicitScopesRequired': value.explicitScopesRequired,
        'explicitWorkspaceRequired': value.explicitWorkspaceRequired,
        'audience': value.audience,
        'tokenMetadataFields': TokenMetadataFieldsToJSON(value.tokenMetadataFields),
    };
}


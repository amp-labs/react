/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Only use one of stringValue, integerValue, booleanValue.
 * @export
 * @interface FieldSettingDefault
 */
export interface FieldSettingDefault {
    /**
     * The default string value to apply to a field
     * @type {string}
     * @memberof FieldSettingDefault
     */
    stringValue?: string;
    /**
     * The default integer value to apply to a field
     * @type {number}
     * @memberof FieldSettingDefault
     */
    integerValue?: number;
    /**
     * The default boolean value to apply to a field
     * @type {boolean}
     * @memberof FieldSettingDefault
     */
    booleanValue?: boolean;
}

/**
 * Check if a given object implements the FieldSettingDefault interface.
 */
export function instanceOfFieldSettingDefault(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FieldSettingDefaultFromJSON(json: any): FieldSettingDefault {
    return FieldSettingDefaultFromJSONTyped(json, false);
}

export function FieldSettingDefaultFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldSettingDefault {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stringValue': !exists(json, 'stringValue') ? undefined : json['stringValue'],
        'integerValue': !exists(json, 'integerValue') ? undefined : json['integerValue'],
        'booleanValue': !exists(json, 'booleanValue') ? undefined : json['booleanValue'],
    };
}

export function FieldSettingDefaultToJSON(value?: FieldSettingDefault | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stringValue': value.stringValue,
        'integerValue': value.integerValue,
        'booleanValue': value.booleanValue,
    };
}


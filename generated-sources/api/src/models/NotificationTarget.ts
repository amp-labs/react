/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NotificationTargetMetadata } from './NotificationTargetMetadata';
import {
    NotificationTargetMetadataFromJSON,
    NotificationTargetMetadataFromJSONTyped,
    NotificationTargetMetadataToJSON,
} from './NotificationTargetMetadata';

/**
 * 
 * @export
 * @interface NotificationTarget
 */
export interface NotificationTarget {
    /**
     * The notification target ID.
     * @type {string}
     * @memberof NotificationTarget
     */
    id: string;
    /**
     * A human-readable label for the notification target.
     * @type {string}
     * @memberof NotificationTarget
     */
    label: string;
    /**
     * The type of notification target.
     * @type {string}
     * @memberof NotificationTarget
     */
    type: NotificationTargetTypeEnum;
    /**
     * 
     * @type {NotificationTargetMetadata}
     * @memberof NotificationTarget
     */
    metadata: NotificationTargetMetadata;
    /**
     * Secrets for the target.
     * @type {object}
     * @memberof NotificationTarget
     */
    secrets?: object;
    /**
     * The time when the notification target was created.
     * @type {Date}
     * @memberof NotificationTarget
     */
    createTime: Date;
    /**
     * The time when the notification target was last updated.
     * @type {Date}
     * @memberof NotificationTarget
     */
    updateTime?: Date;
}


/**
 * @export
 */
export const NotificationTargetTypeEnum = {
    Webhook: 'webhook'
} as const;
export type NotificationTargetTypeEnum = typeof NotificationTargetTypeEnum[keyof typeof NotificationTargetTypeEnum];


/**
 * Check if a given object implements the NotificationTarget interface.
 */
export function instanceOfNotificationTarget(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "createTime" in value;

    return isInstance;
}

export function NotificationTargetFromJSON(json: any): NotificationTarget {
    return NotificationTargetFromJSONTyped(json, false);
}

export function NotificationTargetFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationTarget {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'label': json['label'],
        'type': json['type'],
        'metadata': NotificationTargetMetadataFromJSON(json['metadata']),
        'secrets': !exists(json, 'secrets') ? undefined : json['secrets'],
        'createTime': (new Date(json['createTime'])),
        'updateTime': !exists(json, 'updateTime') ? undefined : (new Date(json['updateTime'])),
    };
}

export function NotificationTargetToJSON(value?: NotificationTarget | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'label': value.label,
        'type': value.type,
        'metadata': NotificationTargetMetadataToJSON(value.metadata),
        'secrets': value.secrets,
        'createTime': (value.createTime.toISOString()),
        'updateTime': value.updateTime === undefined ? undefined : (value.updateTime.toISOString()),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FieldSettingDefault } from './FieldSettingDefault';
import {
    FieldSettingDefaultFromJSON,
    FieldSettingDefaultFromJSONTyped,
    FieldSettingDefaultToJSON,
} from './FieldSettingDefault';

/**
 * 
 * @export
 * @interface FieldSetting
 */
export interface FieldSetting {
    /**
     * 
     * @type {FieldSettingDefault}
     * @memberof FieldSetting
     */
    default?: FieldSettingDefault;
    /**
     * Whether the default value should be applied when creating a record.
     * @type {string}
     * @memberof FieldSetting
     */
    writeOnCreate?: FieldSettingWriteOnCreateEnum;
    /**
     * Whether the default value should be applied when updating a record.
     * @type {string}
     * @memberof FieldSetting
     */
    writeOnUpdate?: FieldSettingWriteOnUpdateEnum;
}


/**
 * @export
 */
export const FieldSettingWriteOnCreateEnum = {
    Always: 'always',
    Never: 'never'
} as const;
export type FieldSettingWriteOnCreateEnum = typeof FieldSettingWriteOnCreateEnum[keyof typeof FieldSettingWriteOnCreateEnum];

/**
 * @export
 */
export const FieldSettingWriteOnUpdateEnum = {
    Always: 'always',
    Never: 'never'
} as const;
export type FieldSettingWriteOnUpdateEnum = typeof FieldSettingWriteOnUpdateEnum[keyof typeof FieldSettingWriteOnUpdateEnum];


/**
 * Check if a given object implements the FieldSetting interface.
 */
export function instanceOfFieldSetting(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FieldSettingFromJSON(json: any): FieldSetting {
    return FieldSettingFromJSONTyped(json, false);
}

export function FieldSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldSetting {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'default': !exists(json, 'default') ? undefined : FieldSettingDefaultFromJSON(json['default']),
        'writeOnCreate': !exists(json, 'writeOnCreate') ? undefined : json['writeOnCreate'],
        'writeOnUpdate': !exists(json, 'writeOnUpdate') ? undefined : json['writeOnUpdate'],
    };
}

export function FieldSettingToJSON(value?: FieldSetting | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'default': FieldSettingDefaultToJSON(value.default),
        'writeOnCreate': value.writeOnCreate,
        'writeOnUpdate': value.writeOnUpdate,
    };
}


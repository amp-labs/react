/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FieldSettingDefaultStringDefault } from './FieldSettingDefaultStringDefault';
import {
    FieldSettingDefaultStringDefaultFromJSON,
    FieldSettingDefaultStringDefaultFromJSONTyped,
    FieldSettingDefaultStringDefaultToJSON,
} from './FieldSettingDefaultStringDefault';

/**
 * 
 * @export
 * @interface FieldSettingDefaultString
 */
export interface FieldSettingDefaultString {
    /**
     * 
     * @type {FieldSettingDefaultStringDefault}
     * @memberof FieldSettingDefaultString
     */
    _default: FieldSettingDefaultStringDefault;
    /**
     * Whether the default value should be applied when creating a record.
     * @type {string}
     * @memberof FieldSettingDefaultString
     */
    writeOnCreate: FieldSettingDefaultStringWriteOnCreateEnum;
    /**
     * Whether the default value should be applied when updating a record.
     * @type {string}
     * @memberof FieldSettingDefaultString
     */
    writeOnUpdate: FieldSettingDefaultStringWriteOnUpdateEnum;
}


/**
 * @export
 */
export const FieldSettingDefaultStringWriteOnCreateEnum = {
    Always: 'always',
    Never: 'never'
} as const;
export type FieldSettingDefaultStringWriteOnCreateEnum = typeof FieldSettingDefaultStringWriteOnCreateEnum[keyof typeof FieldSettingDefaultStringWriteOnCreateEnum];

/**
 * @export
 */
export const FieldSettingDefaultStringWriteOnUpdateEnum = {
    Always: 'always',
    Never: 'never'
} as const;
export type FieldSettingDefaultStringWriteOnUpdateEnum = typeof FieldSettingDefaultStringWriteOnUpdateEnum[keyof typeof FieldSettingDefaultStringWriteOnUpdateEnum];


/**
 * Check if a given object implements the FieldSettingDefaultString interface.
 */
export function instanceOfFieldSettingDefaultString(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "_default" in value;
    isInstance = isInstance && "writeOnCreate" in value;
    isInstance = isInstance && "writeOnUpdate" in value;

    return isInstance;
}

export function FieldSettingDefaultStringFromJSON(json: any): FieldSettingDefaultString {
    return FieldSettingDefaultStringFromJSONTyped(json, false);
}

export function FieldSettingDefaultStringFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldSettingDefaultString {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_default': FieldSettingDefaultStringDefaultFromJSON(json['default']),
        'writeOnCreate': json['writeOnCreate'],
        'writeOnUpdate': json['writeOnUpdate'],
    };
}

export function FieldSettingDefaultStringToJSON(value?: FieldSettingDefaultString | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'default': FieldSettingDefaultStringDefaultToJSON(value._default),
        'writeOnCreate': value.writeOnCreate,
        'writeOnUpdate': value.writeOnUpdate,
    };
}


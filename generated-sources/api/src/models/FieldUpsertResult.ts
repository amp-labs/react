/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Result of an upsert operation for a single field
 * @export
 * @interface FieldUpsertResult
 */
export interface FieldUpsertResult {
    /**
     * Name of the field
     * @type {string}
     * @memberof FieldUpsertResult
     */
    fieldName: string;
    /**
     * Action taken (create, update, none)
     * @type {string}
     * @memberof FieldUpsertResult
     */
    action: string;
    /**
     * Provider-specific metadata about the field
     * @type {{ [key: string]: any; }}
     * @memberof FieldUpsertResult
     */
    metadata?: { [key: string]: any; };
    /**
     * Warnings that occurred during the upsert operation
     * @type {Array<string>}
     * @memberof FieldUpsertResult
     */
    warnings?: Array<string>;
}

/**
 * Check if a given object implements the FieldUpsertResult interface.
 */
export function instanceOfFieldUpsertResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fieldName" in value;
    isInstance = isInstance && "action" in value;

    return isInstance;
}

export function FieldUpsertResultFromJSON(json: any): FieldUpsertResult {
    return FieldUpsertResultFromJSONTyped(json, false);
}

export function FieldUpsertResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldUpsertResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fieldName': json['fieldName'],
        'action': json['action'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'warnings': !exists(json, 'warnings') ? undefined : json['warnings'],
    };
}

export function FieldUpsertResultToJSON(value?: FieldUpsertResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fieldName': value.fieldName,
        'action': value.action,
        'metadata': value.metadata,
        'warnings': value.warnings,
    };
}


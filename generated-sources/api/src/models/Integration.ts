/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Revision } from './Revision';
import {
    RevisionFromJSON,
    RevisionFromJSONTyped,
    RevisionToJSON,
} from './Revision';

/**
 * 
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * The integration ID.
     * @type {string}
     * @memberof Integration
     */
    id: string;
    /**
     * The Ampersand project ID.
     * @type {string}
     * @memberof Integration
     */
    projectId: string;
    /**
     * The integration name.
     * @type {string}
     * @memberof Integration
     */
    name: string;
    /**
     * The SaaS provider that this integration connects to.
     * @type {string}
     * @memberof Integration
     */
    provider: string;
    /**
     * The time the integration was created.
     * @type {Date}
     * @memberof Integration
     */
    createTime: Date;
    /**
     * The time the integration was last updated.
     * @type {Date}
     * @memberof Integration
     */
    updateTime?: Date;
    /**
     * 
     * @type {Revision}
     * @memberof Integration
     */
    latestRevision: Revision;
}

/**
 * Check if a given object implements the Integration interface.
 */
export function instanceOfIntegration(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "provider" in value;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "latestRevision" in value;

    return isInstance;
}

export function IntegrationFromJSON(json: any): Integration {
    return IntegrationFromJSONTyped(json, false);
}

export function IntegrationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Integration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'projectId': json['projectId'],
        'name': json['name'],
        'provider': json['provider'],
        'createTime': (new Date(json['createTime'])),
        'updateTime': !exists(json, 'updateTime') ? undefined : (new Date(json['updateTime'])),
        'latestRevision': RevisionFromJSON(json['latestRevision']),
    };
}

export function IntegrationToJSON(value?: Integration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'projectId': value.projectId,
        'name': value.name,
        'provider': value.provider,
        'createTime': (value.createTime.toISOString()),
        'updateTime': value.updateTime === undefined ? undefined : (value.updateTime.toISOString()),
        'latestRevision': RevisionToJSON(value.latestRevision),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TokenMetadataFieldsOtherFieldsInner
 */
export interface TokenMetadataFieldsOtherFieldsInner {
    /**
     * The internal name of the field
     * @type {string}
     * @memberof TokenMetadataFieldsOtherFieldsInner
     */
    name: string;
    /**
     * The human-readable name of the field
     * @type {string}
     * @memberof TokenMetadataFieldsOtherFieldsInner
     */
    displayName: string;
    /**
     * The path to the field in the token response (accepts dot notation for nested fields)
     * @type {string}
     * @memberof TokenMetadataFieldsOtherFieldsInner
     */
    path: string;
    /**
     * A regex expression to capture the value that we need from the path. There must be only one capture group named 'result' in the expression. If not provided, will cause an error.
     * @type {string}
     * @memberof TokenMetadataFieldsOtherFieldsInner
     */
    capture?: string;
}

/**
 * Check if a given object implements the TokenMetadataFieldsOtherFieldsInner interface.
 */
export function instanceOfTokenMetadataFieldsOtherFieldsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "path" in value;

    return isInstance;
}

export function TokenMetadataFieldsOtherFieldsInnerFromJSON(json: any): TokenMetadataFieldsOtherFieldsInner {
    return TokenMetadataFieldsOtherFieldsInnerFromJSONTyped(json, false);
}

export function TokenMetadataFieldsOtherFieldsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenMetadataFieldsOtherFieldsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'displayName': json['displayName'],
        'path': json['path'],
        'capture': !exists(json, 'capture') ? undefined : json['capture'],
    };
}

export function TokenMetadataFieldsOtherFieldsInnerToJSON(value?: TokenMetadataFieldsOtherFieldsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'displayName': value.displayName,
        'path': value.path,
        'capture': value.capture,
    };
}


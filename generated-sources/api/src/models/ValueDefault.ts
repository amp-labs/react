/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ValueDefaultValue } from './ValueDefaultValue';
import {
    ValueDefaultValueFromJSON,
    ValueDefaultValueFromJSONTyped,
    ValueDefaultValueToJSON,
} from './ValueDefaultValue';

/**
 * 
 * @export
 * @interface ValueDefault
 */
export interface ValueDefault {
    /**
     * 
     * @type {ValueDefaultValue}
     * @memberof ValueDefault
     */
    value: ValueDefaultValue;
    /**
     * Whether the default value should be applied when updating a record.
     * If set to `always`, the default value will be applied when updating a record.
     * If set to `never`, the default value will not be applied when updating a record,
     * only when creating a record.
     * If unspecified, then `always` is assumed.
     * @type {string}
     * @memberof ValueDefault
     */
    applyOnUpdate?: ValueDefaultApplyOnUpdateEnum;
}


/**
 * @export
 */
export const ValueDefaultApplyOnUpdateEnum = {
    Always: 'always',
    Never: 'never'
} as const;
export type ValueDefaultApplyOnUpdateEnum = typeof ValueDefaultApplyOnUpdateEnum[keyof typeof ValueDefaultApplyOnUpdateEnum];


/**
 * Check if a given object implements the ValueDefault interface.
 */
export function instanceOfValueDefault(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function ValueDefaultFromJSON(json: any): ValueDefault {
    return ValueDefaultFromJSONTyped(json, false);
}

export function ValueDefaultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueDefault {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': ValueDefaultValueFromJSON(json['value']),
        'applyOnUpdate': !exists(json, 'applyOnUpdate') ? undefined : json['applyOnUpdate'],
    };
}

export function ValueDefaultToJSON(value?: ValueDefault | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': ValueDefaultValueToJSON(value.value),
        'applyOnUpdate': value.applyOnUpdate,
    };
}


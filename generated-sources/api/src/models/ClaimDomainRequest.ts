/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ClaimDomainRequest
 */
export interface ClaimDomainRequest {
    /**
     * Accepts an email address, domain name, or URL. The domain will be automatically extracted: for emails, the portion after @ is used (e.g., "user@example.com" becomes "example.com"); for URLs, the hostname is extracted (e.g., "https://www.example.com" becomes "example.com").
     * @type {string}
     * @memberof ClaimDomainRequest
     */
    domain: string;
    /**
     * ID of the parent entity claiming the domain
     * @type {string}
     * @memberof ClaimDomainRequest
     */
    parentId: string;
    /**
     * Type of the parent entity
     * @type {string}
     * @memberof ClaimDomainRequest
     */
    parentType: string;
}

/**
 * Check if a given object implements the ClaimDomainRequest interface.
 */
export function instanceOfClaimDomainRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "parentId" in value;
    isInstance = isInstance && "parentType" in value;

    return isInstance;
}

export function ClaimDomainRequestFromJSON(json: any): ClaimDomainRequest {
    return ClaimDomainRequestFromJSONTyped(json, false);
}

export function ClaimDomainRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimDomainRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'domain': json['domain'],
        'parentId': json['parentId'],
        'parentType': json['parentType'],
    };
}

export function ClaimDomainRequestToJSON(value?: ClaimDomainRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'domain': value.domain,
        'parentId': value.parentId,
        'parentType': value.parentType,
    };
}


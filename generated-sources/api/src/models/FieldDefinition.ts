/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssociationDefinition } from './AssociationDefinition';
import {
    AssociationDefinitionFromJSON,
    AssociationDefinitionFromJSONTyped,
    AssociationDefinitionToJSON,
} from './AssociationDefinition';
import type { NumericFieldOptions } from './NumericFieldOptions';
import {
    NumericFieldOptionsFromJSON,
    NumericFieldOptionsFromJSONTyped,
    NumericFieldOptionsToJSON,
} from './NumericFieldOptions';
import type { StringFieldOptions } from './StringFieldOptions';
import {
    StringFieldOptionsFromJSON,
    StringFieldOptionsFromJSONTyped,
    StringFieldOptionsToJSON,
} from './StringFieldOptions';

/**
 * Field definition for creating or updating custom fields
 * @export
 * @interface FieldDefinition
 */
export interface FieldDefinition {
    /**
     * The identifier of the field
     * @type {string}
     * @memberof FieldDefinition
     */
    fieldName: string;
    /**
     * The human-readable name of the field
     * @type {string}
     * @memberof FieldDefinition
     */
    displayName: string;
    /**
     * Optional description of the field
     * @type {string}
     * @memberof FieldDefinition
     */
    description?: string;
    /**
     * The data type of the field. Valid values are string, boolean, date, datetime, singleSelect, multiSelect, int, float
     * @type {string}
     * @memberof FieldDefinition
     */
    valueType: string;
    /**
     * Indicates if the field is required
     * @type {boolean}
     * @memberof FieldDefinition
     */
    required?: boolean;
    /**
     * Indicates if the field must be unique across all records
     * @type {boolean}
     * @memberof FieldDefinition
     */
    unique?: boolean;
    /**
     * Indicates if the field should be indexed for faster search
     * @type {boolean}
     * @memberof FieldDefinition
     */
    indexed?: boolean;
    /**
     * 
     * @type {StringFieldOptions}
     * @memberof FieldDefinition
     */
    stringOptions?: StringFieldOptions;
    /**
     * 
     * @type {NumericFieldOptions}
     * @memberof FieldDefinition
     */
    numericOptions?: NumericFieldOptions;
    /**
     * 
     * @type {AssociationDefinition}
     * @memberof FieldDefinition
     */
    association?: AssociationDefinition;
}

/**
 * Check if a given object implements the FieldDefinition interface.
 */
export function instanceOfFieldDefinition(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fieldName" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "valueType" in value;

    return isInstance;
}

export function FieldDefinitionFromJSON(json: any): FieldDefinition {
    return FieldDefinitionFromJSONTyped(json, false);
}

export function FieldDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fieldName': json['fieldName'],
        'displayName': json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'valueType': json['valueType'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'unique': !exists(json, 'unique') ? undefined : json['unique'],
        'indexed': !exists(json, 'indexed') ? undefined : json['indexed'],
        'stringOptions': !exists(json, 'stringOptions') ? undefined : StringFieldOptionsFromJSON(json['stringOptions']),
        'numericOptions': !exists(json, 'numericOptions') ? undefined : NumericFieldOptionsFromJSON(json['numericOptions']),
        'association': !exists(json, 'association') ? undefined : AssociationDefinitionFromJSON(json['association']),
    };
}

export function FieldDefinitionToJSON(value?: FieldDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fieldName': value.fieldName,
        'displayName': value.displayName,
        'description': value.description,
        'valueType': value.valueType,
        'required': value.required,
        'unique': value.unique,
        'indexed': value.indexed,
        'stringOptions': StringFieldOptionsToJSON(value.stringOptions),
        'numericOptions': NumericFieldOptionsToJSON(value.numericOptions),
        'association': AssociationDefinitionToJSON(value.association),
    };
}


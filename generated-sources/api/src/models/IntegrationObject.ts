/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Backfill } from './Backfill';
import {
    BackfillFromJSON,
    BackfillFromJSONTyped,
    BackfillToJSON,
} from './Backfill';
import type { Delivery } from './Delivery';
import {
    DeliveryFromJSON,
    DeliveryFromJSONTyped,
    DeliveryToJSON,
} from './Delivery';
import type { IntegrationField } from './IntegrationField';
import {
    IntegrationFieldFromJSON,
    IntegrationFieldFromJSONTyped,
    IntegrationFieldToJSON,
} from './IntegrationField';
import type { OptionalFieldsAutoOption } from './OptionalFieldsAutoOption';
import {
    OptionalFieldsAutoOptionFromJSON,
    OptionalFieldsAutoOptionFromJSONTyped,
    OptionalFieldsAutoOptionToJSON,
} from './OptionalFieldsAutoOption';

/**
 * 
 * @export
 * @interface IntegrationObject
 */
export interface IntegrationObject {
    /**
     * 
     * @type {string}
     * @memberof IntegrationObject
     */
    objectName: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationObject
     */
    destination: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationObject
     */
    schedule: string;
    /**
     * An object name to map to.
     * @type {string}
     * @memberof IntegrationObject
     */
    mapToName?: string;
    /**
     * A display name to map to.
     * @type {string}
     * @memberof IntegrationObject
     */
    mapToDisplayName?: string;
    /**
     * 
     * @type {Array<IntegrationField>}
     * @memberof IntegrationObject
     */
    requiredFields?: Array<IntegrationField>;
    /**
     * 
     * @type {Array<IntegrationField>}
     * @memberof IntegrationObject
     */
    optionalFields?: Array<IntegrationField>;
    /**
     * 
     * @type {OptionalFieldsAutoOption}
     * @memberof IntegrationObject
     */
    optionalFieldsAuto?: OptionalFieldsAutoOption;
    /**
     * 
     * @type {Backfill}
     * @memberof IntegrationObject
     */
    backfill?: Backfill;
    /**
     * 
     * @type {Delivery}
     * @memberof IntegrationObject
     */
    delivery?: Delivery;
    /**
     * If set to `always`, the integration will automatically install upon user connection and skip the user field selection step.
     * @type {string}
     * @memberof IntegrationObject
     */
    enabled?: IntegrationObjectEnabledEnum;
}


/**
 * @export
 */
export const IntegrationObjectEnabledEnum = {
    Always: 'always'
} as const;
export type IntegrationObjectEnabledEnum = typeof IntegrationObjectEnabledEnum[keyof typeof IntegrationObjectEnabledEnum];


/**
 * Check if a given object implements the IntegrationObject interface.
 */
export function instanceOfIntegrationObject(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "objectName" in value;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "schedule" in value;

    return isInstance;
}

export function IntegrationObjectFromJSON(json: any): IntegrationObject {
    return IntegrationObjectFromJSONTyped(json, false);
}

export function IntegrationObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationObject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'objectName': json['objectName'],
        'destination': json['destination'],
        'schedule': json['schedule'],
        'mapToName': !exists(json, 'mapToName') ? undefined : json['mapToName'],
        'mapToDisplayName': !exists(json, 'mapToDisplayName') ? undefined : json['mapToDisplayName'],
        'requiredFields': !exists(json, 'requiredFields') ? undefined : ((json['requiredFields'] as Array<any>).map(IntegrationFieldFromJSON)),
        'optionalFields': !exists(json, 'optionalFields') ? undefined : ((json['optionalFields'] as Array<any>).map(IntegrationFieldFromJSON)),
        'optionalFieldsAuto': !exists(json, 'optionalFieldsAuto') ? undefined : OptionalFieldsAutoOptionFromJSON(json['optionalFieldsAuto']),
        'backfill': !exists(json, 'backfill') ? undefined : BackfillFromJSON(json['backfill']),
        'delivery': !exists(json, 'delivery') ? undefined : DeliveryFromJSON(json['delivery']),
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
    };
}

export function IntegrationObjectToJSON(value?: IntegrationObject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'objectName': value.objectName,
        'destination': value.destination,
        'schedule': value.schedule,
        'mapToName': value.mapToName,
        'mapToDisplayName': value.mapToDisplayName,
        'requiredFields': value.requiredFields === undefined ? undefined : ((value.requiredFields as Array<any>).map(IntegrationFieldToJSON)),
        'optionalFields': value.optionalFields === undefined ? undefined : ((value.optionalFields as Array<any>).map(IntegrationFieldToJSON)),
        'optionalFieldsAuto': OptionalFieldsAutoOptionToJSON(value.optionalFieldsAuto),
        'backfill': BackfillToJSON(value.backfill),
        'delivery': DeliveryToJSON(value.delivery),
        'enabled': value.enabled,
    };
}


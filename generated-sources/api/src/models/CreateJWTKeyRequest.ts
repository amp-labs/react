/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateJWTKeyRequest
 */
export interface CreateJWTKeyRequest {
    /**
     * Human-readable label for the JWT key
     * @type {string}
     * @memberof CreateJWTKeyRequest
     */
    label: string;
    /**
     * The cryptographic JWT signing algorithm (currently only RS256 is supported)
     * @type {string}
     * @memberof CreateJWTKeyRequest
     */
    algorithm: CreateJWTKeyRequestAlgorithmEnum;
    /**
     * RSA public key in PEM format for JWT signature verification
     * @type {string}
     * @memberof CreateJWTKeyRequest
     */
    publicKeyPem: string;
}


/**
 * @export
 */
export const CreateJWTKeyRequestAlgorithmEnum = {
    Rs256: 'RS256'
} as const;
export type CreateJWTKeyRequestAlgorithmEnum = typeof CreateJWTKeyRequestAlgorithmEnum[keyof typeof CreateJWTKeyRequestAlgorithmEnum];


/**
 * Check if a given object implements the CreateJWTKeyRequest interface.
 */
export function instanceOfCreateJWTKeyRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "algorithm" in value;
    isInstance = isInstance && "publicKeyPem" in value;

    return isInstance;
}

export function CreateJWTKeyRequestFromJSON(json: any): CreateJWTKeyRequest {
    return CreateJWTKeyRequestFromJSONTyped(json, false);
}

export function CreateJWTKeyRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateJWTKeyRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'label': json['label'],
        'algorithm': json['algorithm'],
        'publicKeyPem': json['publicKeyPem'],
    };
}

export function CreateJWTKeyRequestToJSON(value?: CreateJWTKeyRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'label': value.label,
        'algorithm': value.algorithm,
        'publicKeyPem': value.publicKeyPem,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelObject } from './ModelObject';
import {
    ModelObjectFromJSON,
    ModelObjectFromJSONTyped,
    ModelObjectToJSON,
} from './ModelObject';

/**
 * 
 * @export
 * @interface Action
 */
export interface Action {
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    type?: ActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    schedule?: string;
    /**
     * 
     * @type {Array<ModelObject>}
     * @memberof Action
     */
    standardObjects?: Array<ModelObject>;
}


/**
 * @export
 */
export const ActionTypeEnum = {
    Read: 'read',
    Write: 'write'
} as const;
export type ActionTypeEnum = typeof ActionTypeEnum[keyof typeof ActionTypeEnum];


/**
 * Check if a given object implements the Action interface.
 */
export function instanceOfAction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActionFromJSON(json: any): Action {
    return ActionFromJSONTyped(json, false);
}

export function ActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Action {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'schedule': !exists(json, 'schedule') ? undefined : json['schedule'],
        'standardObjects': !exists(json, 'standardObjects') ? undefined : ((json['standardObjects'] as Array<any>).map(ModelObjectFromJSON)),
    };
}

export function ActionToJSON(value?: Action | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'schedule': value.schedule,
        'standardObjects': value.standardObjects === undefined ? undefined : ((value.standardObjects as Array<any>).map(ModelObjectToJSON)),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProblem,
  InputValidationProblem,
  ProjectMembership,
  UpsertProjectMembershipRequest,
} from '../models';
import {
    ApiProblemFromJSON,
    ApiProblemToJSON,
    InputValidationProblemFromJSON,
    InputValidationProblemToJSON,
    ProjectMembershipFromJSON,
    ProjectMembershipToJSON,
    UpsertProjectMembershipRequestFromJSON,
    UpsertProjectMembershipRequestToJSON,
} from '../models';

export interface GetProjectMembershipForBuilderRequest {
    projectId: string;
    builderId: string;
}

export interface ListBuilderProjectMembershipsRequest {
    builderId: string;
}

export interface ListProjectMembershipsRequest {
    projectId: string;
}

export interface UpsertProjectMembershipOperationRequest {
    projectId: string;
    membership: UpsertProjectMembershipRequest;
}

/**
 * ProjectMembershipApi - interface
 * 
 * @export
 * @interface ProjectMembershipApiInterface
 */
export interface ProjectMembershipApiInterface {
    /**
     * 
     * @summary Get a project membership for a builder
     * @param {string} projectId 
     * @param {string} builderId The builder\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMembershipApiInterface
     */
    getProjectMembershipForBuilderRaw(requestParameters: GetProjectMembershipForBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMembership>>;

    /**
     * Get a project membership for a builder
     */
    getProjectMembershipForBuilder(requestParameters: GetProjectMembershipForBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMembership>;

    /**
     * 
     * @summary List project memberships for a builder
     * @param {string} builderId The builder\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMembershipApiInterface
     */
    listBuilderProjectMembershipsRaw(requestParameters: ListBuilderProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectMembership>>>;

    /**
     * List project memberships for a builder
     */
    listBuilderProjectMemberships(requestParameters: ListBuilderProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectMembership>>;

    /**
     * 
     * @summary List a project\'s memberships
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMembershipApiInterface
     */
    listProjectMembershipsRaw(requestParameters: ListProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectMembership>>>;

    /**
     * List a project\'s memberships
     */
    listProjectMemberships(requestParameters: ListProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectMembership>>;

    /**
     * 
     * @summary Create or update a project membership
     * @param {string} projectId 
     * @param {UpsertProjectMembershipRequest} membership 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMembershipApiInterface
     */
    upsertProjectMembershipRaw(requestParameters: UpsertProjectMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMembership>>;

    /**
     * Create or update a project membership
     */
    upsertProjectMembership(requestParameters: UpsertProjectMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMembership>;

}

/**
 * 
 */
export class ProjectMembershipApi extends runtime.BaseAPI implements ProjectMembershipApiInterface {

    /**
     * Get a project membership for a builder
     */
    async getProjectMembershipForBuilderRaw(requestParameters: GetProjectMembershipForBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMembership>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectMembershipForBuilder.');
        }

        if (requestParameters.builderId === null || requestParameters.builderId === undefined) {
            throw new runtime.RequiredError('builderId','Required parameter requestParameters.builderId was null or undefined when calling getProjectMembershipForBuilder.');
        }

        const queryParameters: any = {};

        if (requestParameters.builderId !== undefined) {
            queryParameters['builderId'] = requestParameters.builderId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/memberships:get-for-builder`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectMembershipFromJSON(jsonValue));
    }

    /**
     * Get a project membership for a builder
     */
    async getProjectMembershipForBuilder(requestParameters: GetProjectMembershipForBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMembership> {
        const response = await this.getProjectMembershipForBuilderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List project memberships for a builder
     */
    async listBuilderProjectMembershipsRaw(requestParameters: ListBuilderProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectMembership>>> {
        if (requestParameters.builderId === null || requestParameters.builderId === undefined) {
            throw new runtime.RequiredError('builderId','Required parameter requestParameters.builderId was null or undefined when calling listBuilderProjectMemberships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/builders/{builderId}/project-memberships`.replace(`{${"builderId"}}`, encodeURIComponent(String(requestParameters.builderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectMembershipFromJSON));
    }

    /**
     * List project memberships for a builder
     */
    async listBuilderProjectMemberships(requestParameters: ListBuilderProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectMembership>> {
        const response = await this.listBuilderProjectMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List a project\'s memberships
     */
    async listProjectMembershipsRaw(requestParameters: ListProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectMembership>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listProjectMemberships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/memberships`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectMembershipFromJSON));
    }

    /**
     * List a project\'s memberships
     */
    async listProjectMemberships(requestParameters: ListProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectMembership>> {
        const response = await this.listProjectMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update a project membership
     */
    async upsertProjectMembershipRaw(requestParameters: UpsertProjectMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMembership>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling upsertProjectMembership.');
        }

        if (requestParameters.membership === null || requestParameters.membership === undefined) {
            throw new runtime.RequiredError('membership','Required parameter requestParameters.membership was null or undefined when calling upsertProjectMembership.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/memberships:upsert`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertProjectMembershipRequestToJSON(requestParameters.membership),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectMembershipFromJSON(jsonValue));
    }

    /**
     * Create or update a project membership
     */
    async upsertProjectMembership(requestParameters: UpsertProjectMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMembership> {
        const response = await this.upsertProjectMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

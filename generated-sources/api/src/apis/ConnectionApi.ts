/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProblem,
  Connection,
  GenerateConnectionRequest,
  InputValidationProblem,
  UpdateConnectionRequest,
} from '../models';
import {
    ApiProblemFromJSON,
    ApiProblemToJSON,
    ConnectionFromJSON,
    ConnectionToJSON,
    GenerateConnectionRequestFromJSON,
    GenerateConnectionRequestToJSON,
    InputValidationProblemFromJSON,
    InputValidationProblemToJSON,
    UpdateConnectionRequestFromJSON,
    UpdateConnectionRequestToJSON,
} from '../models';

export interface DeleteConnectionRequest {
    projectIdOrName: string;
    connectionId: string;
}

export interface GenerateConnectionOperationRequest {
    projectIdOrName: string;
    generateConnectionParams?: GenerateConnectionRequest;
}

export interface GetConnectionRequest {
    projectIdOrName: string;
    connectionId: string;
    includeCreds?: boolean;
    includeRefreshToken?: boolean;
    refresh?: GetConnectionRefreshEnum;
}

export interface ListConnectionsRequest {
    projectIdOrName: string;
    provider?: string;
    groupRef?: string;
    consumerRef?: string;
}

export interface UpdateConnectionOperationRequest {
    projectIdOrName: string;
    connectionId: string;
    updateConnectionRequest: UpdateConnectionRequest;
}

/**
 * ConnectionApi - interface
 * 
 * @export
 * @interface ConnectionApiInterface
 */
export interface ConnectionApiInterface {
    /**
     * 
     * @summary Delete a connection
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} connectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionApiInterface
     */
    deleteConnectionRaw(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a connection
     */
    deleteConnection(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * For providers which support OAuth2 Authorization Code, it is recommended that you use the [/oauth-connect endpoint](https://docs.withampersand.com/reference/oauth/get-url-for-oauth-flow) instead, unless you already have the refresh token and are importing it into Ampersand.
     * @summary Generate a new connection
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {GenerateConnectionRequest} [generateConnectionParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionApiInterface
     */
    generateConnectionRaw(requestParameters: GenerateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>>;

    /**
     * For providers which support OAuth2 Authorization Code, it is recommended that you use the [/oauth-connect endpoint](https://docs.withampersand.com/reference/oauth/get-url-for-oauth-flow) instead, unless you already have the refresh token and are importing it into Ampersand.
     * Generate a new connection
     */
    generateConnection(requestParameters: GenerateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection>;

    /**
     * 
     * @summary Get a connection
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} connectionId 
     * @param {boolean} [includeCreds] Whether to include the credentials in the response. Only access token will be included. Default is false.
     * @param {boolean} [includeRefreshToken] Whether to include the refresh token in credentials in the response along with access token. If true, the &#x60;includeCreds&#x60; query parameter will be ignored. Default is false.
     * @param {'force' | 'ifExpired'} [refresh] Whether to refresh the access token. If value is &#x60;ifExpired&#x60;, the access token will be refreshed only if it has expired. If value is &#x60;force&#x60;, the access token will be refreshed regardless of its expiration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionApiInterface
     */
    getConnectionRaw(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>>;

    /**
     * Get a connection
     */
    getConnection(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection>;

    /**
     * 
     * @summary List connections
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} [provider] The provider name (e.g. \&quot;salesforce\&quot;, \&quot;hubspot\&quot;)
     * @param {string} [groupRef] The ID of the user group that has access to this installation.
     * @param {string} [consumerRef] The consumer reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionApiInterface
     */
    listConnectionsRaw(requestParameters: ListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Connection>>>;

    /**
     * List connections
     */
    listConnections(requestParameters: ListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Connection>>;

    /**
     * Update an existing connection.
     * @summary Update a connection.
     * @param {string} projectIdOrName Project ID or Name.
     * @param {string} connectionId Connection ID.
     * @param {UpdateConnectionRequest} updateConnectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionApiInterface
     */
    updateConnectionRaw(requestParameters: UpdateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>>;

    /**
     * Update an existing connection.
     * Update a connection.
     */
    updateConnection(requestParameters: UpdateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection>;

}

/**
 * 
 */
export class ConnectionApi extends runtime.BaseAPI implements ConnectionApiInterface {

    /**
     * Delete a connection
     */
    async deleteConnectionRaw(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling deleteConnection.');
        }

        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling deleteConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/connections/{connectionId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"connectionId"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a connection
     */
    async deleteConnection(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConnectionRaw(requestParameters, initOverrides);
    }

    /**
     * For providers which support OAuth2 Authorization Code, it is recommended that you use the [/oauth-connect endpoint](https://docs.withampersand.com/reference/oauth/get-url-for-oauth-flow) instead, unless you already have the refresh token and are importing it into Ampersand.
     * Generate a new connection
     */
    async generateConnectionRaw(requestParameters: GenerateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling generateConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/connections:generate`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateConnectionRequestToJSON(requestParameters.generateConnectionParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * For providers which support OAuth2 Authorization Code, it is recommended that you use the [/oauth-connect endpoint](https://docs.withampersand.com/reference/oauth/get-url-for-oauth-flow) instead, unless you already have the refresh token and are importing it into Ampersand.
     * Generate a new connection
     */
    async generateConnection(requestParameters: GenerateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.generateConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a connection
     */
    async getConnectionRaw(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling getConnection.');
        }

        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling getConnection.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeCreds !== undefined) {
            queryParameters['includeCreds'] = requestParameters.includeCreds;
        }

        if (requestParameters.includeRefreshToken !== undefined) {
            queryParameters['includeRefreshToken'] = requestParameters.includeRefreshToken;
        }

        if (requestParameters.refresh !== undefined) {
            queryParameters['refresh'] = requestParameters.refresh;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/connections/{connectionId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"connectionId"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * Get a connection
     */
    async getConnection(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.getConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List connections
     */
    async listConnectionsRaw(requestParameters: ListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Connection>>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling listConnections.');
        }

        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.groupRef !== undefined) {
            queryParameters['groupRef'] = requestParameters.groupRef;
        }

        if (requestParameters.consumerRef !== undefined) {
            queryParameters['consumerRef'] = requestParameters.consumerRef;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/connections`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectionFromJSON));
    }

    /**
     * List connections
     */
    async listConnections(requestParameters: ListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Connection>> {
        const response = await this.listConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing connection.
     * Update a connection.
     */
    async updateConnectionRaw(requestParameters: UpdateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling updateConnection.');
        }

        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling updateConnection.');
        }

        if (requestParameters.updateConnectionRequest === null || requestParameters.updateConnectionRequest === undefined) {
            throw new runtime.RequiredError('updateConnectionRequest','Required parameter requestParameters.updateConnectionRequest was null or undefined when calling updateConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/connections/{connectionId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"connectionId"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateConnectionRequestToJSON(requestParameters.updateConnectionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * Update an existing connection.
     * Update a connection.
     */
    async updateConnection(requestParameters: UpdateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.updateConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetConnectionRefreshEnum = {
    Force: 'force',
    IfExpired: 'ifExpired'
} as const;
export type GetConnectionRefreshEnum = typeof GetConnectionRefreshEnum[keyof typeof GetConnectionRefreshEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BatchUpsertIntegrationsRequest,
  Connection,
  CreateConsumerRequest,
  CreateDestinationRequest,
  CreateGroupRequest,
  CreateInstallationRequest,
  CreateIntegrationRequest,
  CreateProjectMembershipRequest,
  CreateProjectRequest,
  CreateProviderAppRequest,
  HydratedRevision,
  ImportInstallationRequest,
  Installation,
  Integration,
  OauthConnectRequest,
  Operation,
  Project,
  ProjectMembership,
  ProviderApp,
  UpdateInstallationRequest,
  UpdateProjectRequest,
  UpdateProviderAppRequest,
} from '../models';
import {
    BatchUpsertIntegrationsRequestFromJSON,
    BatchUpsertIntegrationsRequestToJSON,
    ConnectionFromJSON,
    ConnectionToJSON,
    CreateConsumerRequestFromJSON,
    CreateConsumerRequestToJSON,
    CreateDestinationRequestFromJSON,
    CreateDestinationRequestToJSON,
    CreateGroupRequestFromJSON,
    CreateGroupRequestToJSON,
    CreateInstallationRequestFromJSON,
    CreateInstallationRequestToJSON,
    CreateIntegrationRequestFromJSON,
    CreateIntegrationRequestToJSON,
    CreateProjectMembershipRequestFromJSON,
    CreateProjectMembershipRequestToJSON,
    CreateProjectRequestFromJSON,
    CreateProjectRequestToJSON,
    CreateProviderAppRequestFromJSON,
    CreateProviderAppRequestToJSON,
    HydratedRevisionFromJSON,
    HydratedRevisionToJSON,
    ImportInstallationRequestFromJSON,
    ImportInstallationRequestToJSON,
    InstallationFromJSON,
    InstallationToJSON,
    IntegrationFromJSON,
    IntegrationToJSON,
    OauthConnectRequestFromJSON,
    OauthConnectRequestToJSON,
    OperationFromJSON,
    OperationToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectMembershipFromJSON,
    ProjectMembershipToJSON,
    ProviderAppFromJSON,
    ProviderAppToJSON,
    UpdateInstallationRequestFromJSON,
    UpdateInstallationRequestToJSON,
    UpdateProjectRequestFromJSON,
    UpdateProjectRequestToJSON,
    UpdateProviderAppRequestFromJSON,
    UpdateProviderAppRequestToJSON,
} from '../models';

export interface BatchUpsertIntegrationsOperationRequest {
    projectId: string;
    batchUpsertIntegrationsRequest?: BatchUpsertIntegrationsRequest;
}

export interface CreateConsumerOperationRequest {
    projectId: string;
    consumer: CreateConsumerRequest;
}

export interface CreateDestinationOperationRequest {
    projectId: string;
    destination: CreateDestinationRequest;
}

export interface CreateGroupOperationRequest {
    projectId: string;
    group: CreateGroupRequest;
}

export interface CreateInstallationOperationRequest {
    projectId: string;
    integrationId: string;
    installation: CreateInstallationRequest;
}

export interface CreateIntegrationOperationRequest {
    projectId: string;
    integration: CreateIntegrationRequest;
}

export interface CreateProjectOperationRequest {
    project: CreateProjectRequest;
}

export interface CreateProjectMembershipOperationRequest {
    projectId: string;
    membership: CreateProjectMembershipRequest;
}

export interface CreateProviderAppOperationRequest {
    projectId: string;
    providerApp: CreateProviderAppRequest;
}

export interface CreateRevisionRequest {
    projectId: string;
    integrationId: string;
    revision?: BatchUpsertIntegrationsRequest;
}

export interface DeleteInstallationRequest {
    projectId: string;
    integrationId: string;
    installationId: string;
}

export interface DeleteProjectRequest {
    projectId: string;
}

export interface DeleteProviderAppRequest {
    projectId: string;
    providerAppId: string;
}

export interface GetConnectionRequest {
    projectId: string;
    connectionId: string;
}

export interface GetHydratedRevisionRequest {
    projectId: string;
    integrationId: string;
    revisionId: string;
    connectionId: string;
}

export interface GetProjectRequest {
    projectId: string;
}

export interface GetProjectMembershipForBuilderRequest {
    projectId: string;
    builderId: string;
}

export interface ImportInstallationOperationRequest {
    projectId: string;
    integrationId: string;
    installation: ImportInstallationRequest;
}

export interface ListAllowedDomainsForProjectRequest {
    projectId: string;
}

export interface ListAllowedProjectsForDomainRequest {
    domain: string;
}

export interface ListBuilderProjectMembershipsRequest {
    builderId: string;
}

export interface ListConnectionsRequest {
    projectId: string;
    provider?: string;
    groupRef?: string;
    consumerRef?: string;
}

export interface ListInstallationsRequest {
    projectId: string;
    integrationId: string;
    groupRef?: string;
}

export interface ListIntegrationsRequest {
    projectId: string;
}

export interface ListOperationsRequest {
    projectId: string;
    integrationId: string;
    installationId: string;
}

export interface ListProjectMembershipsRequest {
    projectId: string;
}

export interface ListProviderAppsRequest {
    projectId: string;
}

export interface OauthConnectOperationRequest {
    connectOAuthParams: OauthConnectRequest;
}

export interface UpdateInstallationOperationRequest {
    projectId: string;
    integrationId: string;
    installationId: string;
    installationUpdate: UpdateInstallationRequest;
}

export interface UpdateProjectOperationRequest {
    projectId: string;
    projectUpdate: UpdateProjectRequest;
}

export interface UpdateProviderAppOperationRequest {
    projectId: string;
    providerAppId: string;
    providerAppUpdate: UpdateProviderAppRequest;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Batch upsert a group of integrations
     * @param {string} projectId 
     * @param {BatchUpsertIntegrationsRequest} [batchUpsertIntegrationsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    batchUpsertIntegrationsRaw(requestParameters: BatchUpsertIntegrationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Integration>>>;

    /**
     * Batch upsert a group of integrations
     */
    batchUpsertIntegrations(requestParameters: BatchUpsertIntegrationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Integration>>;

    /**
     * 
     * @summary Create a new consumer
     * @param {string} projectId 
     * @param {CreateConsumerRequest} consumer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createConsumerRaw(requestParameters: CreateConsumerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new consumer
     */
    createConsumer(requestParameters: CreateConsumerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new destination
     * @param {string} projectId 
     * @param {CreateDestinationRequest} destination 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createDestinationRaw(requestParameters: CreateDestinationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new destination
     */
    createDestination(requestParameters: CreateDestinationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new group
     * @param {string} projectId 
     * @param {CreateGroupRequest} group 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createGroupRaw(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new group
     */
    createGroup(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new installation
     * @param {string} projectId 
     * @param {string} integrationId 
     * @param {CreateInstallationRequest} installation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createInstallationRaw(requestParameters: CreateInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Installation>>;

    /**
     * Create a new installation
     */
    createInstallation(requestParameters: CreateInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Installation>;

    /**
     * 
     * @summary Create a new integration
     * @param {string} projectId 
     * @param {CreateIntegrationRequest} integration 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createIntegrationRaw(requestParameters: CreateIntegrationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new integration
     */
    createIntegration(requestParameters: CreateIntegrationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new project
     * @param {CreateProjectRequest} project 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createProjectRaw(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new project
     */
    createProject(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new project membership
     * @param {string} projectId 
     * @param {CreateProjectMembershipRequest} membership 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createProjectMembershipRaw(requestParameters: CreateProjectMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMembership>>;

    /**
     * Create a new project membership
     */
    createProjectMembership(requestParameters: CreateProjectMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMembership>;

    /**
     * 
     * @summary Create a new provider app
     * @param {string} projectId 
     * @param {CreateProviderAppRequest} providerApp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createProviderAppRaw(requestParameters: CreateProviderAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderApp>>;

    /**
     * Create a new provider app
     */
    createProviderApp(requestParameters: CreateProviderAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderApp>;

    /**
     * 
     * @summary Create a new revision
     * @param {string} projectId 
     * @param {string} integrationId 
     * @param {BatchUpsertIntegrationsRequest} [revision] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createRevisionRaw(requestParameters: CreateRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new revision
     */
    createRevision(requestParameters: CreateRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete an installation
     * @param {string} projectId 
     * @param {string} integrationId 
     * @param {string} installationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteInstallationRaw(requestParameters: DeleteInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an installation
     */
    deleteInstallation(requestParameters: DeleteInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a project
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a project
     */
    deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a provider app
     * @param {string} projectId 
     * @param {string} providerAppId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteProviderAppRaw(requestParameters: DeleteProviderAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a provider app
     */
    deleteProviderApp(requestParameters: DeleteProviderAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary get a connection
     * @param {string} projectId 
     * @param {string} connectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getConnectionRaw(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>>;

    /**
     * get a connection
     */
    getConnection(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection>;

    /**
     * 
     * @summary Hydrate a revision with information from the consumer\'s SaaS instance.
     * @param {string} projectId 
     * @param {string} integrationId 
     * @param {string} revisionId 
     * @param {string} connectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getHydratedRevisionRaw(requestParameters: GetHydratedRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HydratedRevision>>;

    /**
     * Hydrate a revision with information from the consumer\'s SaaS instance.
     */
    getHydratedRevision(requestParameters: GetHydratedRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HydratedRevision>;

    /**
     * 
     * @summary Get a project
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>>;

    /**
     * Get a project
     */
    getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project>;

    /**
     * 
     * @summary Get a project membership for a builder if it exists.
     * @param {string} projectId 
     * @param {string} builderId The builder\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProjectMembershipForBuilderRaw(requestParameters: GetProjectMembershipForBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMembership>>;

    /**
     * Get a project membership for a builder if it exists.
     */
    getProjectMembershipForBuilder(requestParameters: GetProjectMembershipForBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMembership>;

    /**
     * 
     * @summary Import an existing installation
     * @param {string} projectId 
     * @param {string} integrationId 
     * @param {ImportInstallationRequest} installation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    importInstallationRaw(requestParameters: ImportInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Installation>>;

    /**
     * Import an existing installation
     */
    importInstallation(requestParameters: ImportInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Installation>;

    /**
     * 
     * @summary List the domain that are allowlisted for a project.
     * @param {string} projectId The project ID to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listAllowedDomainsForProjectRaw(requestParameters: ListAllowedDomainsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * List the domain that are allowlisted for a project.
     */
    listAllowedDomainsForProject(requestParameters: ListAllowedDomainsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @summary List the projects that a user with an email address ending in the given domain would be able to join.
     * @param {string} domain The domain to search for (e.g. \&quot;company.com\&quot;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listAllowedProjectsForDomainRaw(requestParameters: ListAllowedProjectsForDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * List the projects that a user with an email address ending in the given domain would be able to join.
     */
    listAllowedProjectsForDomain(requestParameters: ListAllowedProjectsForDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @summary List project memberships for a builder.
     * @param {string} builderId The builder\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listBuilderProjectMembershipsRaw(requestParameters: ListBuilderProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectMembership>>>;

    /**
     * List project memberships for a builder.
     */
    listBuilderProjectMemberships(requestParameters: ListBuilderProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectMembership>>;

    /**
     * 
     * @summary List a project\'s connections
     * @param {string} projectId 
     * @param {string} [provider] The provider name (e.g. \&quot;salesforce\&quot;, \&quot;hubspot\&quot;)
     * @param {string} [groupRef] The ID of the user group that has access to this installation.
     * @param {string} [consumerRef] The consumer reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listConnectionsRaw(requestParameters: ListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Connection>>>;

    /**
     * List a project\'s connections
     */
    listConnections(requestParameters: ListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Connection>>;

    /**
     * 
     * @summary List installations
     * @param {string} projectId 
     * @param {string} integrationId 
     * @param {string} [groupRef] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listInstallationsRaw(requestParameters: ListInstallationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Installation>>>;

    /**
     * List installations
     */
    listInstallations(requestParameters: ListInstallationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Installation>>;

    /**
     * 
     * @summary List integrations
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listIntegrationsRaw(requestParameters: ListIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Integration>>>;

    /**
     * List integrations
     */
    listIntegrations(requestParameters: ListIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Integration>>;

    /**
     * 
     * @summary List operations
     * @param {string} projectId 
     * @param {string} integrationId 
     * @param {string} installationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listOperationsRaw(requestParameters: ListOperationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Operation>>>;

    /**
     * List operations
     */
    listOperations(requestParameters: ListOperationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Operation>>;

    /**
     * 
     * @summary List a project\'s memberships
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listProjectMembershipsRaw(requestParameters: ListProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectMembership>>>;

    /**
     * List a project\'s memberships
     */
    listProjectMemberships(requestParameters: ListProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectMembership>>;

    /**
     * 
     * @summary List provider apps
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listProviderAppsRaw(requestParameters: ListProviderAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProviderApp>>>;

    /**
     * List provider apps
     */
    listProviderApps(requestParameters: ListProviderAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProviderApp>>;

    /**
     * 
     * @summary Generate a URL for the browser to render to kick off OAuth flow.
     * @param {OauthConnectRequest} connectOAuthParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    oauthConnectRaw(requestParameters: OauthConnectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Generate a URL for the browser to render to kick off OAuth flow.
     */
    oauthConnect(requestParameters: OauthConnectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Options endpoint to make sure CORS works.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    oauthConnectCorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Options endpoint to make sure CORS works.
     */
    oauthConnectCors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update an installation
     * @param {string} projectId 
     * @param {string} integrationId 
     * @param {string} installationId 
     * @param {UpdateInstallationRequest} installationUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateInstallationRaw(requestParameters: UpdateInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Installation>>;

    /**
     * Update an installation
     */
    updateInstallation(requestParameters: UpdateInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Installation>;

    /**
     * 
     * @summary Update a project
     * @param {string} projectId 
     * @param {UpdateProjectRequest} projectUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateProjectRaw(requestParameters: UpdateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>>;

    /**
     * Update a project
     */
    updateProject(requestParameters: UpdateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project>;

    /**
     * 
     * @summary Update a provider app
     * @param {string} projectId 
     * @param {string} providerAppId 
     * @param {UpdateProviderAppRequest} providerAppUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateProviderAppRaw(requestParameters: UpdateProviderAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderApp>>;

    /**
     * Update a provider app
     */
    updateProviderApp(requestParameters: UpdateProviderAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderApp>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Batch upsert a group of integrations
     */
    async batchUpsertIntegrationsRaw(requestParameters: BatchUpsertIntegrationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Integration>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling batchUpsertIntegrations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/integrations:batch`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BatchUpsertIntegrationsRequestToJSON(requestParameters.batchUpsertIntegrationsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationFromJSON));
    }

    /**
     * Batch upsert a group of integrations
     */
    async batchUpsertIntegrations(requestParameters: BatchUpsertIntegrationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Integration>> {
        const response = await this.batchUpsertIntegrationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new consumer
     */
    async createConsumerRaw(requestParameters: CreateConsumerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createConsumer.');
        }

        if (requestParameters.consumer === null || requestParameters.consumer === undefined) {
            throw new runtime.RequiredError('consumer','Required parameter requestParameters.consumer was null or undefined when calling createConsumer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/consumers`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConsumerRequestToJSON(requestParameters.consumer),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new consumer
     */
    async createConsumer(requestParameters: CreateConsumerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createConsumerRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new destination
     */
    async createDestinationRaw(requestParameters: CreateDestinationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createDestination.');
        }

        if (requestParameters.destination === null || requestParameters.destination === undefined) {
            throw new runtime.RequiredError('destination','Required parameter requestParameters.destination was null or undefined when calling createDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/destinations`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDestinationRequestToJSON(requestParameters.destination),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new destination
     */
    async createDestination(requestParameters: CreateDestinationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createDestinationRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new group
     */
    async createGroupRaw(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createGroup.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling createGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/groups`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGroupRequestToJSON(requestParameters.group),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new group
     */
    async createGroup(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new installation
     */
    async createInstallationRaw(requestParameters: CreateInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Installation>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createInstallation.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling createInstallation.');
        }

        if (requestParameters.installation === null || requestParameters.installation === undefined) {
            throw new runtime.RequiredError('installation','Required parameter requestParameters.installation was null or undefined when calling createInstallation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/integrations/{integrationId}/installations`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInstallationRequestToJSON(requestParameters.installation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallationFromJSON(jsonValue));
    }

    /**
     * Create a new installation
     */
    async createInstallation(requestParameters: CreateInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Installation> {
        const response = await this.createInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new integration
     */
    async createIntegrationRaw(requestParameters: CreateIntegrationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createIntegration.');
        }

        if (requestParameters.integration === null || requestParameters.integration === undefined) {
            throw new runtime.RequiredError('integration','Required parameter requestParameters.integration was null or undefined when calling createIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/integrations`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateIntegrationRequestToJSON(requestParameters.integration),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new integration
     */
    async createIntegration(requestParameters: CreateIntegrationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new project
     */
    async createProjectRaw(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters.project),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new project
     */
    async createProject(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createProjectRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new project membership
     */
    async createProjectMembershipRaw(requestParameters: CreateProjectMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMembership>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createProjectMembership.');
        }

        if (requestParameters.membership === null || requestParameters.membership === undefined) {
            throw new runtime.RequiredError('membership','Required parameter requestParameters.membership was null or undefined when calling createProjectMembership.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/memberships`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectMembershipRequestToJSON(requestParameters.membership),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectMembershipFromJSON(jsonValue));
    }

    /**
     * Create a new project membership
     */
    async createProjectMembership(requestParameters: CreateProjectMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMembership> {
        const response = await this.createProjectMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new provider app
     */
    async createProviderAppRaw(requestParameters: CreateProviderAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderApp>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createProviderApp.');
        }

        if (requestParameters.providerApp === null || requestParameters.providerApp === undefined) {
            throw new runtime.RequiredError('providerApp','Required parameter requestParameters.providerApp was null or undefined when calling createProviderApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/provider-apps`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProviderAppRequestToJSON(requestParameters.providerApp),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderAppFromJSON(jsonValue));
    }

    /**
     * Create a new provider app
     */
    async createProviderApp(requestParameters: CreateProviderAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderApp> {
        const response = await this.createProviderAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new revision
     */
    async createRevisionRaw(requestParameters: CreateRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createRevision.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling createRevision.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/integrations/{integrationId}/revisions`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BatchUpsertIntegrationsRequestToJSON(requestParameters.revision),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new revision
     */
    async createRevision(requestParameters: CreateRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createRevisionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an installation
     */
    async deleteInstallationRaw(requestParameters: DeleteInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteInstallation.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling deleteInstallation.');
        }

        if (requestParameters.installationId === null || requestParameters.installationId === undefined) {
            throw new runtime.RequiredError('installationId','Required parameter requestParameters.installationId was null or undefined when calling deleteInstallation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/integrations/{integrationId}/installations/{installationId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))).replace(`{${"installationId"}}`, encodeURIComponent(String(requestParameters.installationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an installation
     */
    async deleteInstallation(requestParameters: DeleteInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInstallationRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a project
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a project
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a provider app
     */
    async deleteProviderAppRaw(requestParameters: DeleteProviderAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteProviderApp.');
        }

        if (requestParameters.providerAppId === null || requestParameters.providerAppId === undefined) {
            throw new runtime.RequiredError('providerAppId','Required parameter requestParameters.providerAppId was null or undefined when calling deleteProviderApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/provider-apps/{providerAppId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"providerAppId"}}`, encodeURIComponent(String(requestParameters.providerAppId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a provider app
     */
    async deleteProviderApp(requestParameters: DeleteProviderAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProviderAppRaw(requestParameters, initOverrides);
    }

    /**
     * get a connection
     */
    async getConnectionRaw(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getConnection.');
        }

        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling getConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/connections/{connectionId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"connectionId"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * get a connection
     */
    async getConnection(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.getConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hydrate a revision with information from the consumer\'s SaaS instance.
     */
    async getHydratedRevisionRaw(requestParameters: GetHydratedRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HydratedRevision>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getHydratedRevision.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling getHydratedRevision.');
        }

        if (requestParameters.revisionId === null || requestParameters.revisionId === undefined) {
            throw new runtime.RequiredError('revisionId','Required parameter requestParameters.revisionId was null or undefined when calling getHydratedRevision.');
        }

        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling getHydratedRevision.');
        }

        const queryParameters: any = {};

        if (requestParameters.connectionId !== undefined) {
            queryParameters['connectionId'] = requestParameters.connectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/integrations/{integrationId}/revisions/{revisionId}:hydrate`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))).replace(`{${"revisionId"}}`, encodeURIComponent(String(requestParameters.revisionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HydratedRevisionFromJSON(jsonValue));
    }

    /**
     * Hydrate a revision with information from the consumer\'s SaaS instance.
     */
    async getHydratedRevision(requestParameters: GetHydratedRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HydratedRevision> {
        const response = await this.getHydratedRevisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a project
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Get a project
     */
    async getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.getProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a project membership for a builder if it exists.
     */
    async getProjectMembershipForBuilderRaw(requestParameters: GetProjectMembershipForBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMembership>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectMembershipForBuilder.');
        }

        if (requestParameters.builderId === null || requestParameters.builderId === undefined) {
            throw new runtime.RequiredError('builderId','Required parameter requestParameters.builderId was null or undefined when calling getProjectMembershipForBuilder.');
        }

        const queryParameters: any = {};

        if (requestParameters.builderId !== undefined) {
            queryParameters['builderId'] = requestParameters.builderId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/memberships:get-for-builder`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectMembershipFromJSON(jsonValue));
    }

    /**
     * Get a project membership for a builder if it exists.
     */
    async getProjectMembershipForBuilder(requestParameters: GetProjectMembershipForBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMembership> {
        const response = await this.getProjectMembershipForBuilderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import an existing installation
     */
    async importInstallationRaw(requestParameters: ImportInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Installation>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling importInstallation.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling importInstallation.');
        }

        if (requestParameters.installation === null || requestParameters.installation === undefined) {
            throw new runtime.RequiredError('installation','Required parameter requestParameters.installation was null or undefined when calling importInstallation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/integrations/{integrationId}/installations:import`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportInstallationRequestToJSON(requestParameters.installation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallationFromJSON(jsonValue));
    }

    /**
     * Import an existing installation
     */
    async importInstallation(requestParameters: ImportInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Installation> {
        const response = await this.importInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the domain that are allowlisted for a project.
     */
    async listAllowedDomainsForProjectRaw(requestParameters: ListAllowedDomainsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listAllowedDomainsForProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/allowed-domains`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the domain that are allowlisted for a project.
     */
    async listAllowedDomainsForProject(requestParameters: ListAllowedDomainsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.listAllowedDomainsForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the projects that a user with an email address ending in the given domain would be able to join.
     */
    async listAllowedProjectsForDomainRaw(requestParameters: ListAllowedProjectsForDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling listAllowedProjectsForDomain.');
        }

        const queryParameters: any = {};

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects:list-allowed-for-domain`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the projects that a user with an email address ending in the given domain would be able to join.
     */
    async listAllowedProjectsForDomain(requestParameters: ListAllowedProjectsForDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.listAllowedProjectsForDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List project memberships for a builder.
     */
    async listBuilderProjectMembershipsRaw(requestParameters: ListBuilderProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectMembership>>> {
        if (requestParameters.builderId === null || requestParameters.builderId === undefined) {
            throw new runtime.RequiredError('builderId','Required parameter requestParameters.builderId was null or undefined when calling listBuilderProjectMemberships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/builders/{builderId}/project-memberships`.replace(`{${"builderId"}}`, encodeURIComponent(String(requestParameters.builderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectMembershipFromJSON));
    }

    /**
     * List project memberships for a builder.
     */
    async listBuilderProjectMemberships(requestParameters: ListBuilderProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectMembership>> {
        const response = await this.listBuilderProjectMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List a project\'s connections
     */
    async listConnectionsRaw(requestParameters: ListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Connection>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listConnections.');
        }

        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.groupRef !== undefined) {
            queryParameters['groupRef'] = requestParameters.groupRef;
        }

        if (requestParameters.consumerRef !== undefined) {
            queryParameters['consumerRef'] = requestParameters.consumerRef;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/connections`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectionFromJSON));
    }

    /**
     * List a project\'s connections
     */
    async listConnections(requestParameters: ListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Connection>> {
        const response = await this.listConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List installations
     */
    async listInstallationsRaw(requestParameters: ListInstallationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Installation>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listInstallations.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling listInstallations.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupRef !== undefined) {
            queryParameters['groupRef'] = requestParameters.groupRef;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/integrations/{integrationId}/installations`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstallationFromJSON));
    }

    /**
     * List installations
     */
    async listInstallations(requestParameters: ListInstallationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Installation>> {
        const response = await this.listInstallationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List integrations
     */
    async listIntegrationsRaw(requestParameters: ListIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Integration>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listIntegrations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/integrations`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationFromJSON));
    }

    /**
     * List integrations
     */
    async listIntegrations(requestParameters: ListIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Integration>> {
        const response = await this.listIntegrationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List operations
     */
    async listOperationsRaw(requestParameters: ListOperationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Operation>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listOperations.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling listOperations.');
        }

        if (requestParameters.installationId === null || requestParameters.installationId === undefined) {
            throw new runtime.RequiredError('installationId','Required parameter requestParameters.installationId was null or undefined when calling listOperations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/integrations/{integrationId}/installations/{installationId}/operations`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))).replace(`{${"installationId"}}`, encodeURIComponent(String(requestParameters.installationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OperationFromJSON));
    }

    /**
     * List operations
     */
    async listOperations(requestParameters: ListOperationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Operation>> {
        const response = await this.listOperationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List a project\'s memberships
     */
    async listProjectMembershipsRaw(requestParameters: ListProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectMembership>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listProjectMemberships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/memberships`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectMembershipFromJSON));
    }

    /**
     * List a project\'s memberships
     */
    async listProjectMemberships(requestParameters: ListProjectMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectMembership>> {
        const response = await this.listProjectMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List provider apps
     */
    async listProviderAppsRaw(requestParameters: ListProviderAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProviderApp>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listProviderApps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/provider-apps`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderAppFromJSON));
    }

    /**
     * List provider apps
     */
    async listProviderApps(requestParameters: ListProviderAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProviderApp>> {
        const response = await this.listProviderAppsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a URL for the browser to render to kick off OAuth flow.
     */
    async oauthConnectRaw(requestParameters: OauthConnectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.connectOAuthParams === null || requestParameters.connectOAuthParams === undefined) {
            throw new runtime.RequiredError('connectOAuthParams','Required parameter requestParameters.connectOAuthParams was null or undefined when calling oauthConnect.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/oauth-connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OauthConnectRequestToJSON(requestParameters.connectOAuthParams),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Generate a URL for the browser to render to kick off OAuth flow.
     */
    async oauthConnect(requestParameters: OauthConnectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.oauthConnectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Options endpoint to make sure CORS works.
     */
    async oauthConnectCorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth-connect`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Options endpoint to make sure CORS works.
     */
    async oauthConnectCors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauthConnectCorsRaw(initOverrides);
    }

    /**
     * Update an installation
     */
    async updateInstallationRaw(requestParameters: UpdateInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Installation>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateInstallation.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling updateInstallation.');
        }

        if (requestParameters.installationId === null || requestParameters.installationId === undefined) {
            throw new runtime.RequiredError('installationId','Required parameter requestParameters.installationId was null or undefined when calling updateInstallation.');
        }

        if (requestParameters.installationUpdate === null || requestParameters.installationUpdate === undefined) {
            throw new runtime.RequiredError('installationUpdate','Required parameter requestParameters.installationUpdate was null or undefined when calling updateInstallation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/integrations/{integrationId}/installations/{installationId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))).replace(`{${"installationId"}}`, encodeURIComponent(String(requestParameters.installationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInstallationRequestToJSON(requestParameters.installationUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallationFromJSON(jsonValue));
    }

    /**
     * Update an installation
     */
    async updateInstallation(requestParameters: UpdateInstallationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Installation> {
        const response = await this.updateInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a project
     */
    async updateProjectRaw(requestParameters: UpdateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateProject.');
        }

        if (requestParameters.projectUpdate === null || requestParameters.projectUpdate === undefined) {
            throw new runtime.RequiredError('projectUpdate','Required parameter requestParameters.projectUpdate was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectRequestToJSON(requestParameters.projectUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Update a project
     */
    async updateProject(requestParameters: UpdateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a provider app
     */
    async updateProviderAppRaw(requestParameters: UpdateProviderAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderApp>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateProviderApp.');
        }

        if (requestParameters.providerAppId === null || requestParameters.providerAppId === undefined) {
            throw new runtime.RequiredError('providerAppId','Required parameter requestParameters.providerAppId was null or undefined when calling updateProviderApp.');
        }

        if (requestParameters.providerAppUpdate === null || requestParameters.providerAppUpdate === undefined) {
            throw new runtime.RequiredError('providerAppUpdate','Required parameter requestParameters.providerAppUpdate was null or undefined when calling updateProviderApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/provider-apps/{providerAppId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"providerAppId"}}`, encodeURIComponent(String(requestParameters.providerAppId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProviderAppRequestToJSON(requestParameters.providerAppUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderAppFromJSON(jsonValue));
    }

    /**
     * Update a provider app
     */
    async updateProviderApp(requestParameters: UpdateProviderAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderApp> {
        const response = await this.updateProviderAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

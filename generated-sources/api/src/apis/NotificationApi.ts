/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProblem,
  CreateEventTopicRouteRequest,
  CreateTargetRequest,
  CreateTopicRequest,
  CreateTopicTargetRouteRequest,
  InputValidationProblem,
  NotificationEventTopicRoute,
  NotificationTarget,
  NotificationTopic,
  NotificationTopicTargetRoute,
  UpdateTargetRequest,
  UpdateTopicRequest,
} from '../models';
import {
    ApiProblemFromJSON,
    ApiProblemToJSON,
    CreateEventTopicRouteRequestFromJSON,
    CreateEventTopicRouteRequestToJSON,
    CreateTargetRequestFromJSON,
    CreateTargetRequestToJSON,
    CreateTopicRequestFromJSON,
    CreateTopicRequestToJSON,
    CreateTopicTargetRouteRequestFromJSON,
    CreateTopicTargetRouteRequestToJSON,
    InputValidationProblemFromJSON,
    InputValidationProblemToJSON,
    NotificationEventTopicRouteFromJSON,
    NotificationEventTopicRouteToJSON,
    NotificationTargetFromJSON,
    NotificationTargetToJSON,
    NotificationTopicFromJSON,
    NotificationTopicToJSON,
    NotificationTopicTargetRouteFromJSON,
    NotificationTopicTargetRouteToJSON,
    UpdateTargetRequestFromJSON,
    UpdateTargetRequestToJSON,
    UpdateTopicRequestFromJSON,
    UpdateTopicRequestToJSON,
} from '../models';

export interface CreateEventTopicRouteOperationRequest {
    projectIdOrName: string;
    eventTopicRoute: CreateEventTopicRouteRequest;
}

export interface CreateTargetOperationRequest {
    projectIdOrName: string;
    target: CreateTargetRequest;
}

export interface CreateTopicOperationRequest {
    projectIdOrName: string;
    topic: CreateTopicRequest;
}

export interface CreateTopicTargetRouteOperationRequest {
    projectIdOrName: string;
    topicTargetRoute: CreateTopicTargetRouteRequest;
}

export interface DeleteEventTopicRouteRequest {
    projectIdOrName: string;
    routeId: string;
}

export interface DeleteTargetRequest {
    projectIdOrName: string;
    targetId: string;
}

export interface DeleteTopicRequest {
    projectIdOrName: string;
    topicId: string;
}

export interface DeleteTopicTargetRouteRequest {
    projectIdOrName: string;
    routeId: string;
}

export interface ListEventTopicRoutesRequest {
    projectIdOrName: string;
    topicId?: string;
    eventType?: ListEventTopicRoutesEventTypeEnum;
}

export interface ListTargetsRequest {
    projectIdOrName: string;
}

export interface ListTopicTargetRoutesRequest {
    projectIdOrName: string;
}

export interface ListTopicsRequest {
    projectIdOrName: string;
}

export interface UpdateTargetOperationRequest {
    projectIdOrName: string;
    targetId: string;
    updateTargetRequest: UpdateTargetRequest;
}

export interface UpdateTopicOperationRequest {
    projectIdOrName: string;
    topicId: string;
    updateTopicRequest: UpdateTopicRequest;
}

/**
 * NotificationApi - interface
 * 
 * @export
 * @interface NotificationApiInterface
 */
export interface NotificationApiInterface {
    /**
     * Create a new event-topic route that maps specific event types to notification topics.
     * @summary Create an event-topic route
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {CreateEventTopicRouteRequest} eventTopicRoute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    createEventTopicRouteRaw(requestParameters: CreateEventTopicRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationEventTopicRoute>>;

    /**
     * Create a new event-topic route that maps specific event types to notification topics.
     * Create an event-topic route
     */
    createEventTopicRoute(requestParameters: CreateEventTopicRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationEventTopicRoute>;

    /**
     * 
     * @summary Create a notification target
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {CreateTargetRequest} target 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    createTargetRaw(requestParameters: CreateTargetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTarget>>;

    /**
     * Create a notification target
     */
    createTarget(requestParameters: CreateTargetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTarget>;

    /**
     * Create a new notification topic for the project. Topics are used to categorize and organize notifications.
     * @summary Create a notification topic
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {CreateTopicRequest} topic 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    createTopicRaw(requestParameters: CreateTopicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTopic>>;

    /**
     * Create a new notification topic for the project. Topics are used to categorize and organize notifications.
     * Create a notification topic
     */
    createTopic(requestParameters: CreateTopicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTopic>;

    /**
     * 
     * @summary Create a notification topic-target route that maps notification topics to targets for delivery.
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {CreateTopicTargetRouteRequest} topicTargetRoute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    createTopicTargetRouteRaw(requestParameters: CreateTopicTargetRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTopicTargetRoute>>;

    /**
     * Create a notification topic-target route that maps notification topics to targets for delivery.
     */
    createTopicTargetRoute(requestParameters: CreateTopicTargetRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTopicTargetRoute>;

    /**
     * 
     * @summary Delete a notification event-topic route
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} routeId The event-topic route ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    deleteEventTopicRouteRaw(requestParameters: DeleteEventTopicRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a notification event-topic route
     */
    deleteEventTopicRoute(requestParameters: DeleteEventTopicRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a notification target
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} targetId The notification target ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    deleteTargetRaw(requestParameters: DeleteTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a notification target
     */
    deleteTarget(requestParameters: DeleteTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a notification topic
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} topicId The notification topic ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    deleteTopicRaw(requestParameters: DeleteTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a notification topic
     */
    deleteTopic(requestParameters: DeleteTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a notification topic-target route
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} routeId The topic-target route ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    deleteTopicTargetRouteRaw(requestParameters: DeleteTopicTargetRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a notification topic-target route
     */
    deleteTopicTargetRoute(requestParameters: DeleteTopicTargetRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary List notification event-topic routes with optional filtering for topic ID and event type.
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} [topicId] Filter by notification topic ID.
     * @param {'read.backfill.done' | 'connection.created' | 'installation.created' | 'installation.updated' | 'installation.deleted' | 'read.schedule.paused'} [eventType] Filter by notification event type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    listEventTopicRoutesRaw(requestParameters: ListEventTopicRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationEventTopicRoute>>>;

    /**
     * List notification event-topic routes with optional filtering for topic ID and event type.
     */
    listEventTopicRoutes(requestParameters: ListEventTopicRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationEventTopicRoute>>;

    /**
     * 
     * @summary List notification targets
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    listTargetsRaw(requestParameters: ListTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationTarget>>>;

    /**
     * List notification targets
     */
    listTargets(requestParameters: ListTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationTarget>>;

    /**
     * 
     * @summary List notification topic-target routes
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    listTopicTargetRoutesRaw(requestParameters: ListTopicTargetRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationTopicTargetRoute>>>;

    /**
     * List notification topic-target routes
     */
    listTopicTargetRoutes(requestParameters: ListTopicTargetRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationTopicTargetRoute>>;

    /**
     * 
     * @summary List notification topics
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    listTopicsRaw(requestParameters: ListTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationTopic>>>;

    /**
     * List notification topics
     */
    listTopics(requestParameters: ListTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationTopic>>;

    /**
     * 
     * @summary Update a notification target
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} targetId The notification target ID.
     * @param {UpdateTargetRequest} updateTargetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    updateTargetRaw(requestParameters: UpdateTargetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTarget>>;

    /**
     * Update a notification target
     */
    updateTarget(requestParameters: UpdateTargetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTarget>;

    /**
     * 
     * @summary Update a notification topic
     * @param {string} projectIdOrName The Ampersand project ID or project name.
     * @param {string} topicId The notification topic ID.
     * @param {UpdateTopicRequest} updateTopicRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    updateTopicRaw(requestParameters: UpdateTopicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTopic>>;

    /**
     * Update a notification topic
     */
    updateTopic(requestParameters: UpdateTopicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTopic>;

}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI implements NotificationApiInterface {

    /**
     * Create a new event-topic route that maps specific event types to notification topics.
     * Create an event-topic route
     */
    async createEventTopicRouteRaw(requestParameters: CreateEventTopicRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationEventTopicRoute>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling createEventTopicRoute.');
        }

        if (requestParameters.eventTopicRoute === null || requestParameters.eventTopicRoute === undefined) {
            throw new runtime.RequiredError('eventTopicRoute','Required parameter requestParameters.eventTopicRoute was null or undefined when calling createEventTopicRoute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/event-topic-routes`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventTopicRouteRequestToJSON(requestParameters.eventTopicRoute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationEventTopicRouteFromJSON(jsonValue));
    }

    /**
     * Create a new event-topic route that maps specific event types to notification topics.
     * Create an event-topic route
     */
    async createEventTopicRoute(requestParameters: CreateEventTopicRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationEventTopicRoute> {
        const response = await this.createEventTopicRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a notification target
     */
    async createTargetRaw(requestParameters: CreateTargetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTarget>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling createTarget.');
        }

        if (requestParameters.target === null || requestParameters.target === undefined) {
            throw new runtime.RequiredError('target','Required parameter requestParameters.target was null or undefined when calling createTarget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/targets`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTargetRequestToJSON(requestParameters.target),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTargetFromJSON(jsonValue));
    }

    /**
     * Create a notification target
     */
    async createTarget(requestParameters: CreateTargetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTarget> {
        const response = await this.createTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new notification topic for the project. Topics are used to categorize and organize notifications.
     * Create a notification topic
     */
    async createTopicRaw(requestParameters: CreateTopicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTopic>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling createTopic.');
        }

        if (requestParameters.topic === null || requestParameters.topic === undefined) {
            throw new runtime.RequiredError('topic','Required parameter requestParameters.topic was null or undefined when calling createTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/topics`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTopicRequestToJSON(requestParameters.topic),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTopicFromJSON(jsonValue));
    }

    /**
     * Create a new notification topic for the project. Topics are used to categorize and organize notifications.
     * Create a notification topic
     */
    async createTopic(requestParameters: CreateTopicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTopic> {
        const response = await this.createTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a notification topic-target route that maps notification topics to targets for delivery.
     */
    async createTopicTargetRouteRaw(requestParameters: CreateTopicTargetRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTopicTargetRoute>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling createTopicTargetRoute.');
        }

        if (requestParameters.topicTargetRoute === null || requestParameters.topicTargetRoute === undefined) {
            throw new runtime.RequiredError('topicTargetRoute','Required parameter requestParameters.topicTargetRoute was null or undefined when calling createTopicTargetRoute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/topic-target-routes`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTopicTargetRouteRequestToJSON(requestParameters.topicTargetRoute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTopicTargetRouteFromJSON(jsonValue));
    }

    /**
     * Create a notification topic-target route that maps notification topics to targets for delivery.
     */
    async createTopicTargetRoute(requestParameters: CreateTopicTargetRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTopicTargetRoute> {
        const response = await this.createTopicTargetRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a notification event-topic route
     */
    async deleteEventTopicRouteRaw(requestParameters: DeleteEventTopicRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling deleteEventTopicRoute.');
        }

        if (requestParameters.routeId === null || requestParameters.routeId === undefined) {
            throw new runtime.RequiredError('routeId','Required parameter requestParameters.routeId was null or undefined when calling deleteEventTopicRoute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/event-topic-routes/{routeId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters.routeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a notification event-topic route
     */
    async deleteEventTopicRoute(requestParameters: DeleteEventTopicRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEventTopicRouteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a notification target
     */
    async deleteTargetRaw(requestParameters: DeleteTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling deleteTarget.');
        }

        if (requestParameters.targetId === null || requestParameters.targetId === undefined) {
            throw new runtime.RequiredError('targetId','Required parameter requestParameters.targetId was null or undefined when calling deleteTarget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/targets/{targetId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"targetId"}}`, encodeURIComponent(String(requestParameters.targetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a notification target
     */
    async deleteTarget(requestParameters: DeleteTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTargetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a notification topic
     */
    async deleteTopicRaw(requestParameters: DeleteTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling deleteTopic.');
        }

        if (requestParameters.topicId === null || requestParameters.topicId === undefined) {
            throw new runtime.RequiredError('topicId','Required parameter requestParameters.topicId was null or undefined when calling deleteTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/topics/{topicId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters.topicId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a notification topic
     */
    async deleteTopic(requestParameters: DeleteTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTopicRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a notification topic-target route
     */
    async deleteTopicTargetRouteRaw(requestParameters: DeleteTopicTargetRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling deleteTopicTargetRoute.');
        }

        if (requestParameters.routeId === null || requestParameters.routeId === undefined) {
            throw new runtime.RequiredError('routeId','Required parameter requestParameters.routeId was null or undefined when calling deleteTopicTargetRoute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/topic-target-routes/{routeId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters.routeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a notification topic-target route
     */
    async deleteTopicTargetRoute(requestParameters: DeleteTopicTargetRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTopicTargetRouteRaw(requestParameters, initOverrides);
    }

    /**
     * List notification event-topic routes with optional filtering for topic ID and event type.
     */
    async listEventTopicRoutesRaw(requestParameters: ListEventTopicRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationEventTopicRoute>>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling listEventTopicRoutes.');
        }

        const queryParameters: any = {};

        if (requestParameters.topicId !== undefined) {
            queryParameters['topicId'] = requestParameters.topicId;
        }

        if (requestParameters.eventType !== undefined) {
            queryParameters['eventType'] = requestParameters.eventType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/event-topic-routes`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationEventTopicRouteFromJSON));
    }

    /**
     * List notification event-topic routes with optional filtering for topic ID and event type.
     */
    async listEventTopicRoutes(requestParameters: ListEventTopicRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationEventTopicRoute>> {
        const response = await this.listEventTopicRoutesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List notification targets
     */
    async listTargetsRaw(requestParameters: ListTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationTarget>>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling listTargets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/targets`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationTargetFromJSON));
    }

    /**
     * List notification targets
     */
    async listTargets(requestParameters: ListTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationTarget>> {
        const response = await this.listTargetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List notification topic-target routes
     */
    async listTopicTargetRoutesRaw(requestParameters: ListTopicTargetRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationTopicTargetRoute>>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling listTopicTargetRoutes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/topic-target-routes`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationTopicTargetRouteFromJSON));
    }

    /**
     * List notification topic-target routes
     */
    async listTopicTargetRoutes(requestParameters: ListTopicTargetRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationTopicTargetRoute>> {
        const response = await this.listTopicTargetRoutesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List notification topics
     */
    async listTopicsRaw(requestParameters: ListTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationTopic>>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling listTopics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/topics`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationTopicFromJSON));
    }

    /**
     * List notification topics
     */
    async listTopics(requestParameters: ListTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationTopic>> {
        const response = await this.listTopicsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a notification target
     */
    async updateTargetRaw(requestParameters: UpdateTargetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTarget>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling updateTarget.');
        }

        if (requestParameters.targetId === null || requestParameters.targetId === undefined) {
            throw new runtime.RequiredError('targetId','Required parameter requestParameters.targetId was null or undefined when calling updateTarget.');
        }

        if (requestParameters.updateTargetRequest === null || requestParameters.updateTargetRequest === undefined) {
            throw new runtime.RequiredError('updateTargetRequest','Required parameter requestParameters.updateTargetRequest was null or undefined when calling updateTarget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/targets/{targetId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"targetId"}}`, encodeURIComponent(String(requestParameters.targetId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTargetRequestToJSON(requestParameters.updateTargetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTargetFromJSON(jsonValue));
    }

    /**
     * Update a notification target
     */
    async updateTarget(requestParameters: UpdateTargetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTarget> {
        const response = await this.updateTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a notification topic
     */
    async updateTopicRaw(requestParameters: UpdateTopicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTopic>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling updateTopic.');
        }

        if (requestParameters.topicId === null || requestParameters.topicId === undefined) {
            throw new runtime.RequiredError('topicId','Required parameter requestParameters.topicId was null or undefined when calling updateTopic.');
        }

        if (requestParameters.updateTopicRequest === null || requestParameters.updateTopicRequest === undefined) {
            throw new runtime.RequiredError('updateTopicRequest','Required parameter requestParameters.updateTopicRequest was null or undefined when calling updateTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/notifications/topics/{topicId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"topicId"}}`, encodeURIComponent(String(requestParameters.topicId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTopicRequestToJSON(requestParameters.updateTopicRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTopicFromJSON(jsonValue));
    }

    /**
     * Update a notification topic
     */
    async updateTopic(requestParameters: UpdateTopicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTopic> {
        const response = await this.updateTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListEventTopicRoutesEventTypeEnum = {
    ReadBackfillDone: 'read.backfill.done',
    ConnectionCreated: 'connection.created',
    InstallationCreated: 'installation.created',
    InstallationUpdated: 'installation.updated',
    InstallationDeleted: 'installation.deleted',
    ReadSchedulePaused: 'read.schedule.paused'
} as const;
export type ListEventTopicRoutesEventTypeEnum = typeof ListEventTopicRoutesEventTypeEnum[keyof typeof ListEventTopicRoutesEventTypeEnum];

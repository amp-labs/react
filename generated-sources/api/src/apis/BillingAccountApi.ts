/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProblem,
  BillingAccount,
  CreateBillingAccountSession200Response,
  CreateBillingAccountSessionRequest,
  InputValidationProblem,
} from '../models';
import {
    ApiProblemFromJSON,
    ApiProblemToJSON,
    BillingAccountFromJSON,
    BillingAccountToJSON,
    CreateBillingAccountSession200ResponseFromJSON,
    CreateBillingAccountSession200ResponseToJSON,
    CreateBillingAccountSessionRequestFromJSON,
    CreateBillingAccountSessionRequestToJSON,
    InputValidationProblemFromJSON,
    InputValidationProblemToJSON,
} from '../models';

export interface CreateBillingAccountSessionOperationRequest {
    billingAccountId: string;
    createBillingAccountSessionRequest: CreateBillingAccountSessionRequest;
}

export interface GetOrgBillingAccountRequest {
    orgId: string;
}

/**
 * BillingAccountApi - interface
 * 
 * @export
 * @interface BillingAccountApiInterface
 */
export interface BillingAccountApiInterface {
    /**
     * 
     * @summary Create a portal session for a billing account
     * @param {string} billingAccountId 
     * @param {CreateBillingAccountSessionRequest} createBillingAccountSessionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingAccountApiInterface
     */
    createBillingAccountSessionRaw(requestParameters: CreateBillingAccountSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBillingAccountSession200Response>>;

    /**
     * Create a portal session for a billing account
     */
    createBillingAccountSession(requestParameters: CreateBillingAccountSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBillingAccountSession200Response>;

    /**
     * 
     * @summary Get the billing account for an organization
     * @param {string} orgId ID of the organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingAccountApiInterface
     */
    getOrgBillingAccountRaw(requestParameters: GetOrgBillingAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingAccount>>;

    /**
     * Get the billing account for an organization
     */
    getOrgBillingAccount(requestParameters: GetOrgBillingAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingAccount>;

}

/**
 * 
 */
export class BillingAccountApi extends runtime.BaseAPI implements BillingAccountApiInterface {

    /**
     * Create a portal session for a billing account
     */
    async createBillingAccountSessionRaw(requestParameters: CreateBillingAccountSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBillingAccountSession200Response>> {
        if (requestParameters.billingAccountId === null || requestParameters.billingAccountId === undefined) {
            throw new runtime.RequiredError('billingAccountId','Required parameter requestParameters.billingAccountId was null or undefined when calling createBillingAccountSession.');
        }

        if (requestParameters.createBillingAccountSessionRequest === null || requestParameters.createBillingAccountSessionRequest === undefined) {
            throw new runtime.RequiredError('createBillingAccountSessionRequest','Required parameter requestParameters.createBillingAccountSessionRequest was null or undefined when calling createBillingAccountSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/billingAccounts/{billingAccountId}/portalSession`.replace(`{${"billingAccountId"}}`, encodeURIComponent(String(requestParameters.billingAccountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBillingAccountSessionRequestToJSON(requestParameters.createBillingAccountSessionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBillingAccountSession200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a portal session for a billing account
     */
    async createBillingAccountSession(requestParameters: CreateBillingAccountSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBillingAccountSession200Response> {
        const response = await this.createBillingAccountSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the billing account for an organization
     */
    async getOrgBillingAccountRaw(requestParameters: GetOrgBillingAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingAccount>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getOrgBillingAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/orgs/{orgId}/billingAccount`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingAccountFromJSON(jsonValue));
    }

    /**
     * Get the billing account for an organization
     */
    async getOrgBillingAccount(requestParameters: GetOrgBillingAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingAccount> {
        const response = await this.getOrgBillingAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

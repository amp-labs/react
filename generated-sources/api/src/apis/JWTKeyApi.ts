/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProblem,
  CreateJWTKeyRequest,
  JWTKey,
  JWTKeyResponse,
  PatchJWTKeyRequest,
} from '../models';
import {
    ApiProblemFromJSON,
    ApiProblemToJSON,
    CreateJWTKeyRequestFromJSON,
    CreateJWTKeyRequestToJSON,
    JWTKeyFromJSON,
    JWTKeyToJSON,
    JWTKeyResponseFromJSON,
    JWTKeyResponseToJSON,
    PatchJWTKeyRequestFromJSON,
    PatchJWTKeyRequestToJSON,
} from '../models';

export interface CreateJWTKeyOperationRequest {
    projectIdOrName: string;
    createJWTKeyRequest: CreateJWTKeyRequest;
}

export interface DeleteJWTKeyRequest {
    projectIdOrName: string;
    keyId: string;
}

export interface GetJWTKeyRequest {
    projectIdOrName: string;
    keyId: string;
}

export interface ListJWTKeysRequest {
    projectIdOrName: string;
    active?: boolean;
}

export interface UpdateJWTKeyRequest {
    projectIdOrName: string;
    keyId: string;
    patchJWTKeyRequest: PatchJWTKeyRequest;
}

/**
 * JWTKeyApi - interface
 * 
 * @export
 * @interface JWTKeyApiInterface
 */
export interface JWTKeyApiInterface {
    /**
     * Creates a new JWT key for the specified project with RSA public key for token verification
     * @summary Create a new JWT key
     * @param {string} projectIdOrName Ampersand Project ID or name.
     * @param {CreateJWTKeyRequest} createJWTKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JWTKeyApiInterface
     */
    createJWTKeyRaw(requestParameters: CreateJWTKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWTKeyResponse>>;

    /**
     * Creates a new JWT key for the specified project with RSA public key for token verification
     * Create a new JWT key
     */
    createJWTKey(requestParameters: CreateJWTKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWTKeyResponse>;

    /**
     * Permanently deletes a JWT key from the specified project
     * @summary Delete a JWT key
     * @param {string} projectIdOrName Ampersand Project ID or name.
     * @param {string} keyId The JWT key ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JWTKeyApiInterface
     */
    deleteJWTKeyRaw(requestParameters: DeleteJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Permanently deletes a JWT key from the specified project
     * Delete a JWT key
     */
    deleteJWTKey(requestParameters: DeleteJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific JWT key by its ID within the specified project
     * @summary Get a specific JWT key
     * @param {string} projectIdOrName Ampersand Project ID or name.
     * @param {string} keyId The JWT key ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JWTKeyApiInterface
     */
    getJWTKeyRaw(requestParameters: GetJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWTKey>>;

    /**
     * Retrieves a specific JWT key by its ID within the specified project
     * Get a specific JWT key
     */
    getJWTKey(requestParameters: GetJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWTKey>;

    /**
     * Retrieves all JWT keys for the specified project, with optional filtering for active keys only
     * @summary List JWT keys
     * @param {string} projectIdOrName Ampersand Project ID or name.
     * @param {boolean} [active] Filter to only return active JWT keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JWTKeyApiInterface
     */
    listJWTKeysRaw(requestParameters: ListJWTKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JWTKey>>>;

    /**
     * Retrieves all JWT keys for the specified project, with optional filtering for active keys only
     * List JWT keys
     */
    listJWTKeys(requestParameters: ListJWTKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JWTKey>>;

    /**
     * Updates specific fields of a JWT key using field masks. Currently supports updating the \'active\' status and \'name\' field.
     * @summary Update a JWT key
     * @param {string} projectIdOrName Ampersand Project ID or name.
     * @param {string} keyId The JWT key ID.
     * @param {PatchJWTKeyRequest} patchJWTKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JWTKeyApiInterface
     */
    updateJWTKeyRaw(requestParameters: UpdateJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWTKey>>;

    /**
     * Updates specific fields of a JWT key using field masks. Currently supports updating the \'active\' status and \'name\' field.
     * Update a JWT key
     */
    updateJWTKey(requestParameters: UpdateJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWTKey>;

}

/**
 * 
 */
export class JWTKeyApi extends runtime.BaseAPI implements JWTKeyApiInterface {

    /**
     * Creates a new JWT key for the specified project with RSA public key for token verification
     * Create a new JWT key
     */
    async createJWTKeyRaw(requestParameters: CreateJWTKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWTKeyResponse>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling createJWTKey.');
        }

        if (requestParameters.createJWTKeyRequest === null || requestParameters.createJWTKeyRequest === undefined) {
            throw new runtime.RequiredError('createJWTKeyRequest','Required parameter requestParameters.createJWTKeyRequest was null or undefined when calling createJWTKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/jwt-keys`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateJWTKeyRequestToJSON(requestParameters.createJWTKeyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTKeyResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new JWT key for the specified project with RSA public key for token verification
     * Create a new JWT key
     */
    async createJWTKey(requestParameters: CreateJWTKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWTKeyResponse> {
        const response = await this.createJWTKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently deletes a JWT key from the specified project
     * Delete a JWT key
     */
    async deleteJWTKeyRaw(requestParameters: DeleteJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling deleteJWTKey.');
        }

        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling deleteJWTKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/jwt-keys/{keyId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently deletes a JWT key from the specified project
     * Delete a JWT key
     */
    async deleteJWTKey(requestParameters: DeleteJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteJWTKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific JWT key by its ID within the specified project
     * Get a specific JWT key
     */
    async getJWTKeyRaw(requestParameters: GetJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWTKey>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling getJWTKey.');
        }

        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling getJWTKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/jwt-keys/{keyId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTKeyFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific JWT key by its ID within the specified project
     * Get a specific JWT key
     */
    async getJWTKey(requestParameters: GetJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWTKey> {
        const response = await this.getJWTKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all JWT keys for the specified project, with optional filtering for active keys only
     * List JWT keys
     */
    async listJWTKeysRaw(requestParameters: ListJWTKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JWTKey>>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling listJWTKeys.');
        }

        const queryParameters: any = {};

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/jwt-keys`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JWTKeyFromJSON));
    }

    /**
     * Retrieves all JWT keys for the specified project, with optional filtering for active keys only
     * List JWT keys
     */
    async listJWTKeys(requestParameters: ListJWTKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JWTKey>> {
        const response = await this.listJWTKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates specific fields of a JWT key using field masks. Currently supports updating the \'active\' status and \'name\' field.
     * Update a JWT key
     */
    async updateJWTKeyRaw(requestParameters: UpdateJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWTKey>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling updateJWTKey.');
        }

        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling updateJWTKey.');
        }

        if (requestParameters.patchJWTKeyRequest === null || requestParameters.patchJWTKeyRequest === undefined) {
            throw new runtime.RequiredError('patchJWTKeyRequest','Required parameter requestParameters.patchJWTKeyRequest was null or undefined when calling updateJWTKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/jwt-keys/{keyId}`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchJWTKeyRequestToJSON(requestParameters.patchJWTKeyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTKeyFromJSON(jsonValue));
    }

    /**
     * Updates specific fields of a JWT key using field masks. Currently supports updating the \'active\' status and \'name\' field.
     * Update a JWT key
     */
    async updateJWTKey(requestParameters: UpdateJWTKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWTKey> {
        const response = await this.updateJWTKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProblem,
  ObjectMetadata,
} from '../models';
import {
    ApiProblemFromJSON,
    ApiProblemToJSON,
    ObjectMetadataFromJSON,
    ObjectMetadataToJSON,
} from '../models';

export interface GetObjectMetadataForConnectionRequest {
    projectIdOrName: string;
    provider: string;
    objectName: string;
    groupRef?: string;
}

export interface GetObjectMetadataForInstallationRequest {
    projectIdOrName: string;
    integrationId: string;
    objectName: string;
    groupRef?: string;
}

/**
 * ObjectsFieldsApi - interface
 * 
 * @export
 * @interface ObjectsFieldsApiInterface
 */
export interface ObjectsFieldsApiInterface {
    /**
     * Retrieves metadata about an object in a customer\'s SaaS instance, including its fields. This endpoint only requires that a Connection exists for the given groupRef. It does not apply any object mappings. 
     * @summary Get object metadata for connection
     * @param {string} projectIdOrName The unique identifier or name of the project.
     * @param {string} provider The API Provider
     * @param {string} objectName Object name (mapped or unmapped)
     * @param {string} [groupRef] The groupRef for the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsFieldsApiInterface
     */
    getObjectMetadataForConnectionRaw(requestParameters: GetObjectMetadataForConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectMetadata>>;

    /**
     * Retrieves metadata about an object in a customer\'s SaaS instance, including its fields. This endpoint only requires that a Connection exists for the given groupRef. It does not apply any object mappings. 
     * Get object metadata for connection
     */
    getObjectMetadataForConnection(requestParameters: GetObjectMetadataForConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectMetadata>;

    /**
     * Retrieves metadata about an object in a customer\'s SaaS instance, including its fields. This endpoint requires that an Installation exists for the given groupRef. It applies object mappings. 
     * @summary Get object metadata for installation
     * @param {string} projectIdOrName The unique identifier or name of the project.
     * @param {string} integrationId The integration ID.
     * @param {string} objectName Object name (mapped or unmapped)
     * @param {string} [groupRef] The groupRef for the installation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsFieldsApiInterface
     */
    getObjectMetadataForInstallationRaw(requestParameters: GetObjectMetadataForInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectMetadata>>;

    /**
     * Retrieves metadata about an object in a customer\'s SaaS instance, including its fields. This endpoint requires that an Installation exists for the given groupRef. It applies object mappings. 
     * Get object metadata for installation
     */
    getObjectMetadataForInstallation(requestParameters: GetObjectMetadataForInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectMetadata>;

}

/**
 * 
 */
export class ObjectsFieldsApi extends runtime.BaseAPI implements ObjectsFieldsApiInterface {

    /**
     * Retrieves metadata about an object in a customer\'s SaaS instance, including its fields. This endpoint only requires that a Connection exists for the given groupRef. It does not apply any object mappings. 
     * Get object metadata for connection
     */
    async getObjectMetadataForConnectionRaw(requestParameters: GetObjectMetadataForConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectMetadata>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling getObjectMetadataForConnection.');
        }

        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling getObjectMetadataForConnection.');
        }

        if (requestParameters.objectName === null || requestParameters.objectName === undefined) {
            throw new runtime.RequiredError('objectName','Required parameter requestParameters.objectName was null or undefined when calling getObjectMetadataForConnection.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupRef !== undefined) {
            queryParameters['groupRef'] = requestParameters.groupRef;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/providers/{provider}/objects/{objectName}/metadata`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))).replace(`{${"objectName"}}`, encodeURIComponent(String(requestParameters.objectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectMetadataFromJSON(jsonValue));
    }

    /**
     * Retrieves metadata about an object in a customer\'s SaaS instance, including its fields. This endpoint only requires that a Connection exists for the given groupRef. It does not apply any object mappings. 
     * Get object metadata for connection
     */
    async getObjectMetadataForConnection(requestParameters: GetObjectMetadataForConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectMetadata> {
        const response = await this.getObjectMetadataForConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves metadata about an object in a customer\'s SaaS instance, including its fields. This endpoint requires that an Installation exists for the given groupRef. It applies object mappings. 
     * Get object metadata for installation
     */
    async getObjectMetadataForInstallationRaw(requestParameters: GetObjectMetadataForInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectMetadata>> {
        if (requestParameters.projectIdOrName === null || requestParameters.projectIdOrName === undefined) {
            throw new runtime.RequiredError('projectIdOrName','Required parameter requestParameters.projectIdOrName was null or undefined when calling getObjectMetadataForInstallation.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling getObjectMetadataForInstallation.');
        }

        if (requestParameters.objectName === null || requestParameters.objectName === undefined) {
            throw new runtime.RequiredError('objectName','Required parameter requestParameters.objectName was null or undefined when calling getObjectMetadataForInstallation.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupRef !== undefined) {
            queryParameters['groupRef'] = requestParameters.groupRef;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectIdOrName}/integrations/{integrationId}/objects/{objectName}/metadata`.replace(`{${"projectIdOrName"}}`, encodeURIComponent(String(requestParameters.projectIdOrName))).replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))).replace(`{${"objectName"}}`, encodeURIComponent(String(requestParameters.objectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectMetadataFromJSON(jsonValue));
    }

    /**
     * Retrieves metadata about an object in a customer\'s SaaS instance, including its fields. This endpoint requires that an Installation exists for the given groupRef. It applies object mappings. 
     * Get object metadata for installation
     */
    async getObjectMetadataForInstallation(requestParameters: GetObjectMetadataForInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectMetadata> {
        const response = await this.getObjectMetadataForInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

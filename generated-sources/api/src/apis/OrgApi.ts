/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUserToOrgRequest,
  ApiProblem,
  Builder,
  ClaimDomainRequest,
  ClaimedDomainResponse,
  CreateOrgInviteRequest,
  CreateOrgRequest,
  InputValidationProblem,
  Invite,
  Org,
  UpdateOrgRequest,
} from '../models';
import {
    AddUserToOrgRequestFromJSON,
    AddUserToOrgRequestToJSON,
    ApiProblemFromJSON,
    ApiProblemToJSON,
    BuilderFromJSON,
    BuilderToJSON,
    ClaimDomainRequestFromJSON,
    ClaimDomainRequestToJSON,
    ClaimedDomainResponseFromJSON,
    ClaimedDomainResponseToJSON,
    CreateOrgInviteRequestFromJSON,
    CreateOrgInviteRequestToJSON,
    CreateOrgRequestFromJSON,
    CreateOrgRequestToJSON,
    InputValidationProblemFromJSON,
    InputValidationProblemToJSON,
    InviteFromJSON,
    InviteToJSON,
    OrgFromJSON,
    OrgToJSON,
    UpdateOrgRequestFromJSON,
    UpdateOrgRequestToJSON,
} from '../models';

export interface AddUserToOrgOperationRequest {
    orgId: string;
    addUserToOrgRequest: AddUserToOrgRequest;
}

export interface CheckClaimedDomainRequest {
    domain: string;
}

export interface ClaimDomainOperationRequest {
    claimDomainRequest: ClaimDomainRequest;
}

export interface CreateOrgOperationRequest {
    org: CreateOrgRequest;
}

export interface CreateOrgInviteOperationRequest {
    orgId: string;
    invite?: CreateOrgInviteRequest;
}

export interface DeleteOrgInviteRequest {
    orgId: string;
    inviteId: string;
}

export interface GetOrgRequest {
    orgId: string;
}

export interface GetOrgInviteRequest {
    orgId: string;
    inviteId: string;
}

export interface ListOrgBuildersRequest {
    orgId: string;
}

export interface ListOrgClaimedDomainsRequest {
    orgId: string;
}

export interface ListOrgInvitesRequest {
    orgId: string;
}

export interface UpdateOrgOperationRequest {
    orgId: string;
    orgUpdate: UpdateOrgRequest;
}

/**
 * OrgApi - interface
 * 
 * @export
 * @interface OrgApiInterface
 */
export interface OrgApiInterface {
    /**
     * Adds a builder to an organization. Two authorization modes - Org owner inviting another user, or self-joining via claimed domain (authenticated user\'s email domain should be claimed by this organization).
     * @summary Add user to an organization
     * @param {string} orgId ID of the organization.
     * @param {AddUserToOrgRequest} addUserToOrgRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    addUserToOrgRaw(requestParameters: AddUserToOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Adds a builder to an organization. Two authorization modes - Org owner inviting another user, or self-joining via claimed domain (authenticated user\'s email domain should be claimed by this organization).
     * Add user to an organization
     */
    addUserToOrg(requestParameters: AddUserToOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns claimed domain information if authenticated user is an owner of the organization that claimed the domain, or if the user\'s email domain matches the claimed domain.
     * @summary Check if a domain is claimed
     * @param {string} domain Accepts an email address, domain name, or URL. The domain will be automatically extracted: for emails, the portion after @ is used (e.g., \&quot;user@example.com\&quot; becomes \&quot;example.com\&quot;); for URLs, the hostname is extracted (e.g., \&quot;https://www.example.com\&quot; becomes \&quot;example.com\&quot;). 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    checkClaimedDomainRaw(requestParameters: CheckClaimedDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimedDomainResponse>>;

    /**
     * Returns claimed domain information if authenticated user is an owner of the organization that claimed the domain, or if the user\'s email domain matches the claimed domain.
     * Check if a domain is claimed
     */
    checkClaimedDomain(requestParameters: CheckClaimedDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimedDomainResponse>;

    /**
     * Claim a domain for an organization. Accepts email, domain, or URL.
     * @summary Claim a domain
     * @param {ClaimDomainRequest} claimDomainRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    claimDomainRaw(requestParameters: ClaimDomainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Claim a domain for an organization. Accepts email, domain, or URL.
     * Claim a domain
     */
    claimDomain(requestParameters: ClaimDomainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new organization
     * @param {CreateOrgRequest} org 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    createOrgRaw(requestParameters: CreateOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Org>>;

    /**
     * Create a new organization
     */
    createOrg(requestParameters: CreateOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Org>;

    /**
     * 
     * @summary Invite a user to an organization
     * @param {string} orgId ID of the organization.
     * @param {CreateOrgInviteRequest} [invite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    createOrgInviteRaw(requestParameters: CreateOrgInviteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invite>>;

    /**
     * Invite a user to an organization
     */
    createOrgInvite(requestParameters: CreateOrgInviteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invite>;

    /**
     * 
     * @summary Revoke an invite
     * @param {string} orgId ID of the organization.
     * @param {string} inviteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    deleteOrgInviteRaw(requestParameters: DeleteOrgInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Revoke an invite
     */
    deleteOrgInvite(requestParameters: DeleteOrgInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get an organization
     * @param {string} orgId ID of the organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    getOrgRaw(requestParameters: GetOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Org>>;

    /**
     * Get an organization
     */
    getOrg(requestParameters: GetOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Org>;

    /**
     * 
     * @summary Get an invite
     * @param {string} orgId ID of the organization.
     * @param {string} inviteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    getOrgInviteRaw(requestParameters: GetOrgInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invite>>;

    /**
     * Get an invite
     */
    getOrgInvite(requestParameters: GetOrgInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invite>;

    /**
     * 
     * @summary List builders for an organization
     * @param {string} orgId ID of the organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    listOrgBuildersRaw(requestParameters: ListOrgBuildersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Builder>>>;

    /**
     * List builders for an organization
     */
    listOrgBuilders(requestParameters: ListOrgBuildersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Builder>>;

    /**
     * Get all domains claimed by a specific organization
     * @summary List organization\'s claimed domains
     * @param {string} orgId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    listOrgClaimedDomainsRaw(requestParameters: ListOrgClaimedDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClaimedDomainResponse>>>;

    /**
     * Get all domains claimed by a specific organization
     * List organization\'s claimed domains
     */
    listOrgClaimedDomains(requestParameters: ListOrgClaimedDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClaimedDomainResponse>>;

    /**
     * 
     * @summary List invites for an organization
     * @param {string} orgId ID of the organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    listOrgInvitesRaw(requestParameters: ListOrgInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Invite>>>;

    /**
     * List invites for an organization
     */
    listOrgInvites(requestParameters: ListOrgInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Invite>>;

    /**
     * 
     * @summary Update an organization
     * @param {string} orgId ID of the organization.
     * @param {UpdateOrgRequest} orgUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApiInterface
     */
    updateOrgRaw(requestParameters: UpdateOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Org>>;

    /**
     * Update an organization
     */
    updateOrg(requestParameters: UpdateOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Org>;

}

/**
 * 
 */
export class OrgApi extends runtime.BaseAPI implements OrgApiInterface {

    /**
     * Adds a builder to an organization. Two authorization modes - Org owner inviting another user, or self-joining via claimed domain (authenticated user\'s email domain should be claimed by this organization).
     * Add user to an organization
     */
    async addUserToOrgRaw(requestParameters: AddUserToOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addUserToOrg.');
        }

        if (requestParameters.addUserToOrgRequest === null || requestParameters.addUserToOrgRequest === undefined) {
            throw new runtime.RequiredError('addUserToOrgRequest','Required parameter requestParameters.addUserToOrgRequest was null or undefined when calling addUserToOrg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}/memberships`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserToOrgRequestToJSON(requestParameters.addUserToOrgRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a builder to an organization. Two authorization modes - Org owner inviting another user, or self-joining via claimed domain (authenticated user\'s email domain should be claimed by this organization).
     * Add user to an organization
     */
    async addUserToOrg(requestParameters: AddUserToOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserToOrgRaw(requestParameters, initOverrides);
    }

    /**
     * Returns claimed domain information if authenticated user is an owner of the organization that claimed the domain, or if the user\'s email domain matches the claimed domain.
     * Check if a domain is claimed
     */
    async checkClaimedDomainRaw(requestParameters: CheckClaimedDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimedDomainResponse>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling checkClaimedDomain.');
        }

        const queryParameters: any = {};

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/claimed-domains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimedDomainResponseFromJSON(jsonValue));
    }

    /**
     * Returns claimed domain information if authenticated user is an owner of the organization that claimed the domain, or if the user\'s email domain matches the claimed domain.
     * Check if a domain is claimed
     */
    async checkClaimedDomain(requestParameters: CheckClaimedDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimedDomainResponse> {
        const response = await this.checkClaimedDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Claim a domain for an organization. Accepts email, domain, or URL.
     * Claim a domain
     */
    async claimDomainRaw(requestParameters: ClaimDomainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.claimDomainRequest === null || requestParameters.claimDomainRequest === undefined) {
            throw new runtime.RequiredError('claimDomainRequest','Required parameter requestParameters.claimDomainRequest was null or undefined when calling claimDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/claimed-domains`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimDomainRequestToJSON(requestParameters.claimDomainRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Claim a domain for an organization. Accepts email, domain, or URL.
     * Claim a domain
     */
    async claimDomain(requestParameters: ClaimDomainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.claimDomainRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new organization
     */
    async createOrgRaw(requestParameters: CreateOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Org>> {
        if (requestParameters.org === null || requestParameters.org === undefined) {
            throw new runtime.RequiredError('org','Required parameter requestParameters.org was null or undefined when calling createOrg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrgRequestToJSON(requestParameters.org),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrgFromJSON(jsonValue));
    }

    /**
     * Create a new organization
     */
    async createOrg(requestParameters: CreateOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Org> {
        const response = await this.createOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invite a user to an organization
     */
    async createOrgInviteRaw(requestParameters: CreateOrgInviteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invite>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createOrgInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}/invites`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrgInviteRequestToJSON(requestParameters.invite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteFromJSON(jsonValue));
    }

    /**
     * Invite a user to an organization
     */
    async createOrgInvite(requestParameters: CreateOrgInviteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invite> {
        const response = await this.createOrgInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke an invite
     */
    async deleteOrgInviteRaw(requestParameters: DeleteOrgInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteOrgInvite.');
        }

        if (requestParameters.inviteId === null || requestParameters.inviteId === undefined) {
            throw new runtime.RequiredError('inviteId','Required parameter requestParameters.inviteId was null or undefined when calling deleteOrgInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}/invites/{inviteId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters.inviteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke an invite
     */
    async deleteOrgInvite(requestParameters: DeleteOrgInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrgInviteRaw(requestParameters, initOverrides);
    }

    /**
     * Get an organization
     */
    async getOrgRaw(requestParameters: GetOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Org>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getOrg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrgFromJSON(jsonValue));
    }

    /**
     * Get an organization
     */
    async getOrg(requestParameters: GetOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Org> {
        const response = await this.getOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an invite
     */
    async getOrgInviteRaw(requestParameters: GetOrgInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invite>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getOrgInvite.');
        }

        if (requestParameters.inviteId === null || requestParameters.inviteId === undefined) {
            throw new runtime.RequiredError('inviteId','Required parameter requestParameters.inviteId was null or undefined when calling getOrgInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}/invites/{inviteId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters.inviteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteFromJSON(jsonValue));
    }

    /**
     * Get an invite
     */
    async getOrgInvite(requestParameters: GetOrgInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invite> {
        const response = await this.getOrgInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List builders for an organization
     */
    async listOrgBuildersRaw(requestParameters: ListOrgBuildersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Builder>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listOrgBuilders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}/builders`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BuilderFromJSON));
    }

    /**
     * List builders for an organization
     */
    async listOrgBuilders(requestParameters: ListOrgBuildersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Builder>> {
        const response = await this.listOrgBuildersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all domains claimed by a specific organization
     * List organization\'s claimed domains
     */
    async listOrgClaimedDomainsRaw(requestParameters: ListOrgClaimedDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClaimedDomainResponse>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listOrgClaimedDomains.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}/claimed-domains`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClaimedDomainResponseFromJSON));
    }

    /**
     * Get all domains claimed by a specific organization
     * List organization\'s claimed domains
     */
    async listOrgClaimedDomains(requestParameters: ListOrgClaimedDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClaimedDomainResponse>> {
        const response = await this.listOrgClaimedDomainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List invites for an organization
     */
    async listOrgInvitesRaw(requestParameters: ListOrgInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Invite>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listOrgInvites.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}/invites`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InviteFromJSON));
    }

    /**
     * List invites for an organization
     */
    async listOrgInvites(requestParameters: ListOrgInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Invite>> {
        const response = await this.listOrgInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an organization
     */
    async updateOrgRaw(requestParameters: UpdateOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Org>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateOrg.');
        }

        if (requestParameters.orgUpdate === null || requestParameters.orgUpdate === undefined) {
            throw new runtime.RequiredError('orgUpdate','Required parameter requestParameters.orgUpdate was null or undefined when calling updateOrg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orgs/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrgRequestToJSON(requestParameters.orgUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrgFromJSON(jsonValue));
    }

    /**
     * Update an organization
     */
    async updateOrg(requestParameters: UpdateOrgOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Org> {
        const response = await this.updateOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

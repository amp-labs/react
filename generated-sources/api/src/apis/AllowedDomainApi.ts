/* tslint:disable */
/* eslint-disable */
/**
 * Ampersand public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProblem,
  InputValidationProblem,
} from '../models';
import {
    ApiProblemFromJSON,
    ApiProblemToJSON,
    InputValidationProblemFromJSON,
    InputValidationProblemToJSON,
} from '../models';

export interface ListAllowedDomainsForProjectRequest {
    projectId: string;
}

export interface ListAllowedProjectsForDomainRequest {
    domain: string;
}

/**
 * AllowedDomainApi - interface
 * 
 * @export
 * @interface AllowedDomainApiInterface
 */
export interface AllowedDomainApiInterface {
    /**
     * List the email domain that are allow to join a project.
     * @summary List allowed domains for project
     * @param {string} projectId The project ID to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllowedDomainApiInterface
     */
    listAllowedDomainsForProjectRaw(requestParameters: ListAllowedDomainsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * List the email domain that are allow to join a project.
     * List allowed domains for project
     */
    listAllowedDomainsForProject(requestParameters: ListAllowedDomainsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * List the projects that a user with an email address ending in the given domain would be able to join.
     * @summary List projects allowed for domain
     * @param {string} domain The domain to search for (e.g. \&quot;company.com\&quot;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllowedDomainApiInterface
     */
    listAllowedProjectsForDomainRaw(requestParameters: ListAllowedProjectsForDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * List the projects that a user with an email address ending in the given domain would be able to join.
     * List projects allowed for domain
     */
    listAllowedProjectsForDomain(requestParameters: ListAllowedProjectsForDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

}

/**
 * 
 */
export class AllowedDomainApi extends runtime.BaseAPI implements AllowedDomainApiInterface {

    /**
     * List the email domain that are allow to join a project.
     * List allowed domains for project
     */
    async listAllowedDomainsForProjectRaw(requestParameters: ListAllowedDomainsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listAllowedDomainsForProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/allowed-domains`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the email domain that are allow to join a project.
     * List allowed domains for project
     */
    async listAllowedDomainsForProject(requestParameters: ListAllowedDomainsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.listAllowedDomainsForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the projects that a user with an email address ending in the given domain would be able to join.
     * List projects allowed for domain
     */
    async listAllowedProjectsForDomainRaw(requestParameters: ListAllowedProjectsForDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling listAllowedProjectsForDomain.');
        }

        const queryParameters: any = {};

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects:list-allowed-for-domain`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the projects that a user with an email address ending in the given domain would be able to join.
     * List projects allowed for domain
     */
    async listAllowedProjectsForDomain(requestParameters: ListAllowedProjectsForDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.listAllowedProjectsForDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
